#    Schema validation rules in N3
#    See validate.n3
#
#   There is not on the semantic web a single meaning of
# the term "schema valid", as one can make different choices
# about what information is used for validation, and what lengths
# are gone to to try to find inconsitencies. In general, one cannot
# for any set of rules, just prove that a document does not violate
# a given set of constraints.  However, we can set the bar at a
# particular height. For example
#  - Retrieve schemata for any namesapces used in the target
#  - apply a given set of rules (a certian limite number of times?)
#  - check the result has no inconsistencies.
#
# The basic strategy is that which ontology systems seem to assume:
# Find all classes to which everything belongs, and deduce things from that.
#
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

@prefix : <validate#> .       # For our use
@prefix v: <validate.n3#> .	# Hint for others use


this log:forAll <#p>, <#p1>, <#p2>,	# Properties
	 <#c>, <#c1>, <#c2>.   # Classes

<> doc:version "$Id$".

# Transitivity (note DAML stuff repeats this effectively as it declares them transitive)

{ <#x> rdfs:subPropertyOf <#y>. <#y> rdfs:subPropertyOf <#z>. } log:implies { <#x> rdfs:subPropertyOf <#z>. }
{ <#x> rdfs:subClassOf <#y>. <#y> rdfs:subClassOf <#z>. } log:implies { <#x> rdfs:subClassOf <#z>. }


# Implication of subclass:


{ 	<#x> a <#c1>.
	<#c1> rdfs:subClassOf <#c2> . } log:implies  { <#x> a <#c2> } .

# Implication of subPropertyOf:


{ 	<#p1> has rdfs:range <#c>.
	<#p2> rdfs:subPropertyOf <#p1> . } log:implies  { <#p2> has rdfs:range <#c> } .


# Implication of Range and domain
#  From domain to range

{ 	<#p> rdfs:domain <#c>.
	<#x> <#p> <#y> . } log:implies  { <#x> a <#c> } .

{ 	<#p> rdfs:range <#c>.
	<#x> <#p> <#y> . } log:implies  { <#y> a <#c> } .



# ends



