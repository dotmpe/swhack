#!/usr/bin/python
#
# See http://fink.sourceforge.net/doc/packaging/reference.php
# See http://www.w3.org/DesignIssues/Notation3.html
#
import sys
import string
import os
import re

version = "$Id$"[1:-1]

def macroSubstitute(line, dict):
    return line  #@@@@@@

def convert(path):
    """Convert Fink info format to n3"""
    global nochange
    global verbose
    dict = {}

    print "# http://www.w3.org/DesignIssues/Notation3"
    print "# Generated from", path
    print "# Generated by  ", version
    print
    print "@prefix fink: <http://www.w3.org/2000/10/swap/util/fink#>."
    print "@prefix pkg:  <http://www.w3.org/2000/10/swap/util/fink-pkg#>."   # package names
    print "@prefix lic:  <http://www.w3.org/2000/10/swap/util/fink-lic#>."   # licenses
    print

    input = open(path, "r")
    buf = input.read()  # Read the file
    input.close()
    i = 0
    comment = re.compile(r'^(.*?)#.*$')
    header = re.compile(r'^([A-Za-z0-9]*): *(.*) *$')
    contact = re.compile(r'([A-Za-z0-9-]*)')    @@@@@@@@@@@@@@@@@@@

    macro = re.compile(r'([-_a-zA-Z0-9\.]+)=(.*)')
    macro1 = re.compile(r'^(.*?)\$([a-zA-Z])(.*)$')
    macron = re.compile(r'^(.*?)\$\(([a-zA-Z0-9]+)\)(.*)$')
    include = re.compile(r'include *([-_a-zA-Z0-9\./]+)')
    target = re.compile(r'^(.*?)\$@(.*)$')
    dependency = re.compile( r'^([-_a-zA-Z0-9][-_a-zA-Z0-9\.]*) *:(.*)$' )
    rule = re.compile(r'^\.([-_a-zA-Z0-9]*)\.([-_a-zA-Z0-9]*)')
    recipe = re.compile( r'^\t.*')
    filename = re.compile( r'[-_a-zA-Z0-9\./]+')
    blank = re.compile(r"^ *$")

    recipeList = []
    subj = None

    while 1:
	j = buf.find("\n", i)
	if j <0: break
	e = j
	if e>i and buf[e-1]=='\r':
	    e = e-1
        line = buf[i:e]
	i = j+1

	k = line.find("#") # Chop comments
	if k >= 0:
	    comment = line[k:]
	    line = line[:k]
	else:
	    comment = ""


	m = header.match(line)
	if m:
#	    print "# header", m.group(1)
	    head = m.group(1)
	    property = "fink:" + m.group(1)
	    value = m.group(2)
	    multiline = 0
	    if value == "<<":
	        j = buf.find("<<", i)  # Not always at beginning of line. Sometimes no following \n
	        if j<0: raise RuntimeError("In "+path+", no trailing delimiter to multiline value: "+buf[i:])
		value = buf[i:j]
		i = j+3  # skip <<\n
		multiline = 1

		print "    " + property + ' """'+value+'""";'
	        continue


	    if head == "Maintainer":
		m = contact.match(value)
		print """     %s [con:firstName "%s"; con:lastName "%s"; con:mailbox <mailto:%s>];"""%(
		    property, m.group(1), m.group(2), m.group(3))
		continue

	    print "    " + property + ' "' + value + '";'
	    continue

	m = blank.match(line)
	if m:
	    print comment
	    continue
	print "#@@", line, comment
    print "# end of info from", path
    print

def do(path):
    """ Path can be directory"""
    global doall
    global recursive
    if verbose: sys.stderr.write("fink2n3: converting " + path + "\n")
    if os.path.isdir(path):
        if recursive:
            for name in os.listdir(path):
                do(path + "/" + name)
    else:
        if doall or path[-5:] == ".info":
            convert(path)
        else:
            sys.stderr.write("de-cr: skipping "+path+"\n")
        
######################################## Main program

recursive = 0
nochange = 1
verbose = 0
doall = 0
files = []

for arg in sys.argv[1:]:
    if arg[0:1] == "-":
        if arg == "-r": recursive = 1    # Recursive
	elif arg == "-a": doall=1
        elif arg == "-?" or arg == "-h" or arg == "--help":
	    print """Convert Fink .info format  to n3 format.

Syntax:    make2n3  [-r] <file>

    where <file> can be omitted and if so defaults to /sw/fink/dists .
    This program was http://www.w3.org/2000/10/swap/util/fink2p3.py
    $Id$
"""
        else:
            print """Bad option argument."""
            sys.exit(-1)
    else:
        files.append(arg)

if files == []: files = [ "/sw/fink/dists" ] # Default

for path in files:
    do(path)
