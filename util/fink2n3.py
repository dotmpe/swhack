#!/usr/bin/python
#
# See http://fink.sourceforge.net/doc/packaging/reference.php
#   and http://fink.sourceforge.net/doc/packaging/format.php#format
# See http://www.w3.org/DesignIssues/Notation3.html
#
# TODO:
#	- Recursive Splitoffs convert nicely to N3. Remember parent,  fink:child relation
#	- Version number qualifiers on dependecies   [fink:thisOrSuccesso xxx]
#
import sys
import string
import os
import re

PREFIX="/sw"

version = "$Id$"[1:-1]
macros = { "N": "Package", "n":"Package",  "v":"Version", "r": "Revision",
	    "p": "_prefix", "P": "_prefix"}

comment = re.compile(r'^(.*?)#.*$')
header = re.compile(r'^ *([-A-Za-z0-9]*): *(.*) *$')
contact = re.compile(r'([-A-Za-z0-9]+) +([-A-Za-z0-9-]+) *<([-_A-Za-z0-9@\.+]*)>')
contact2 = re.compile(r'None *<([-_A-Za-z0-9@\.+]*)>')
contact3 = re.compile(r'^.*(.*?) *<([-_A-Za-z0-9@\.+]*)>')  # @@@@@@@ I18n
qualified = re.compile(r'(.*)(\(.*\)) *')
blank = re.compile(r'[ \t]*')

import  notation3

def ss(str):
    """Format string for output"""
    return notation3.stringToN3(str)

def makeId(str):
    res = ""
    for c in str.strip():
	x = string.find("-.", c)
	if x <0:
	    res=res+c
	else:
	    res=res+"_" # @@ loose info
    return res

def expand(str, dict):
    str = str.strip()
    while 1:
	x = str.find("%")
	if x < 0: break
	try:
	    str = str[:x] + dict[macros[str[x+1]]].strip() + str[x+2:]
	except KeyError:
	    print "@@@@@ dict is", dict
	    print "@@@@@ macros are", macros
	    raise RuntimeError("Macros fails with"+str[x+1]+`dict`)
    return str

def makePackageList(str, dict):
    """Strip spaces and expand %N %v %r macros in module name"""
    if str.find("|")>=0:
	res = "["
	while 1:
	    x = str.find("|")
	    if x<0 : break
	    res = res + "fink:option %s; " % makePackageList(str[:x], dict)
	    str = str [x+1:]
	return res + "fink:option %s]" % makePackageList(str, dict)

    m = qualified.match(str)
    if m:
        str = m.group(1)   # strip off qualifications @@@@@@@@ losing info here
#	print "@@@@@@@@@@@@@@@@@@@ CUT OUT QUALIFIER IN ", str

    str = expand(str,dict)

    while 1:
	x = str.find("-")
	if x<0:break
	str = str[:x] + "_" + str[x+1:]
    while 1:
	x = str.find("+")
	if x<0:break
	str = str[:x] + "_plus" + str[x+1:]
    return "pkg:"+str[0].lower()+str[1:]
    
def prefixes():
    print "# http://www.w3.org/DesignIssues/Notation3"
    print "# Generated by  ", version
    print
    print "@prefix fink: <http://www.w3.org/2000/10/swap/util/fink#>."
    print "@prefix con: <http://www.w3.org/2000/10/swap/pim/contact#>."
    print "@prefix pkg:  <http://www.w3.org/2000/10/swap/util/fink-pkg#>."   # package names
    print "@prefix lic:  <http://www.w3.org/2000/10/swap/util/fink-lic#>."   # licenses
    print


def convert(path):
    """Convert Fink info format to n3"""
    print "# Start info from", path
    global nochange
    global verbose
    current = { "_prefix": PREFIX}
    currentPackage = None
    dict = {}

    input = open(path, "r")
    buf = input.read()  # Read the file
    input.close()
    i = 0


    recipeList = []
    subj = None

    while 1:
	j = buf.find("\n", i)
	if j <0: break
	e = j
	if e>i and buf[e-1]=='\r':
	    e = e-1
        line = buf[i:e]
	i = j+1

	k = line.find("#") # Chop comments
	if k >= 0:
	    comment = line[k:]
	    line = line[:k]
	else:
	    comment = ""


	m = header.match(line)
	if m:
#	    print "# header", m.group(1)
	    head = m.group(1)
	    property = m.group(1)
	    property = "fink:" + property[0].lower()+property[1:]
	    value = m.group(2)
	    multiline = 0
	    if value == "<<":
	        j = buf.find("<<", i)  # Not always at beginning of line. Sometimes no following \n
	        if j<0: raise RuntimeError("In "+path+", no trailing delimiter to multiline value: "+buf[i:])
		value = buf[i:j]
		i = j+3  # skip <<\n
		multiline = 1

#		print "    " + property + " " + ss(value) +';'
#	        continue

	    # RFC822-style line wrap
	    else:
		while buf[i:i+1] !="" and buf[i:i+1] in " \t":
		    j = buf.find("\n", i)
		    if j <0: break
		    e = j
		    if e>i and buf[e-1]=='\r':
			e = e-1
		    line = line + buf[i:e]
		    i = j+1
	    
		    k = line.find("#") # Chop comments
		    if k >= 0:
			comment = comment + line[k:]
			line = line[:k]
		    m = header.match(line)
		    value = m.group(2)

	    current[head] = value    # track things like package, version, revision

	    if head == "Package":
	        if currentPackage:
		    print ". # End of ", currentPackage
		print """%s  fink:packageName "%s";""" % (makePackageList(value,current), value)
		currentPackage = value
		continue

	    if head == "Version":
		versionId = makePackageList(current["Package"], current) + "_v" + makeId(value)
		print "        fink:specificVersion %s ." % versionId
		print "%s fink:version %s;" %(versionId, ss(value)) 
		continue

	    if head == "Revision":
		revisionId = versionId + "_r" + makeId(value)
		print "        fink:specificRevision %s ." % revisionId
		print "%s fink:revision %s;" %(revisionId, ss(value))
		print "    fink:infoFrom <%s>; " % path
		continue

	    if head in [ "Depends", "BuildDepends", "Recommends", "Conflicts", "Replaces"]:
	        modules = string.split(value, ",")
		if modules[0].strip() == "": continue
		print "    "+property+" "+makePackageList(modules[0], current),
		for mod in modules[1:]:
		    print ", "+makePackageList(mod, current),
		print ";"
		continue

	    if head == "Maintainer":
		m = contact.match(value)
		if m != None:
		    print """     %s [con:firstName %s; con:lastName %s; con:mailbox <mailto:%s>];"""%(
			property, ss(m.group(1)), ss(m.group(2)), m.group(3))
		    continue
		m = contact2.match(value)
		if m != None:
		    print """     %s [con:mailbox <mailto:%s>];"""%(
			    property, m.group(1))
		    continue
		m = contact3.match(value)
		if m != None:
		    print """     %s [con:name "%s"; con:mailbox <mailto:%s>];"""%(
			    property, m.group(1), m.group(2))
		    continue
		print """     %s [con:name %s];"""% (property, ss(value))
		continue

	    print "    " + property + " "+ss(value) + ';'
#	    print "#was " + property + " "+value + ';'

	    continue

	m = blank.match(line)
	if m:
	    print comment
	    continue
	print "#@@", line, comment
	raise RuntimeError("Unknown line format:"+line)

    if currentPackage:
	print ". # End of package ", currentPackage
    print "# End of info from", path
    print

def do(path, explicit=1):
    """Convert file of tree of files.
    
    Path can be directory.  If explicitly named, files are done anyway"""
    global doall
    global recursive
    global verbose

    if verbose: sys.stderr.write("fink2n3: converting " + path + "\n")
    if os.path.isdir(path) and (path[:7] != "binary-" or doall):
        if recursive:
            for name in os.listdir(path):
                do(path + "/" + name, explicit=0)
    else:
        if doall or explicit or path[-5:] == ".info":
            convert(path)
        else:
	    if verbose:
		sys.stderr.write("de-cr: skipping "+path+"\n")
        
######################################## Main program

recursive = 0
nochange = 1
verbose = 0
doall = 0
files = []

for arg in sys.argv[1:]:
    if arg[0:1] == "-":
        if arg == "-r": recursive = 1    # Recursive
	elif arg == "-a": doall=1
        elif arg == "-?" or arg == "-h" or arg == "--help":
	    print """Convert Fink .info format  to n3 format.

Syntax:    make2n3  [-r] <file>

    where <file> can be omitted and if so defaults to /sw/fink/dists .
    This program was http://www.w3.org/2000/10/swap/util/fink2p3.py
    $Id$
"""
        else:
            print """Bad option argument."""
            sys.exit(-1)
    else:
        files.append(arg)

if files == []: files = [ "/sw/fink/dists" ] # Default

prefixes()
for path in files:
    do(path)
print "# ends"

# ends
