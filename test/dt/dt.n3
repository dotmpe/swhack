#   This is a set of datatypes for RDF/DAML/N3
Schema part 2 - Datatypes spec http://www.w3.org/TR/xmlschema-2/
#
@prefix doc: <../pim/doc.n3> .
@prefix dt: <dt.n3#> .

<> doc:title "A set of data types for RDF, DAML and N3".

# For reference....
dt:xmldtspec = <http://www.w3.org/TR/xmlschema-2/> .


# Modeling the definitions in 2.1:

dt:Datatype a rdfs:Class.


dt:valueSpace a rdf:Property;
	rdfs:domain dt:Datatype;
	rdfs:range dt:ValueSpace;
	rdfs: comment """A value space is the set of values for a given datatype.
	Each value in the value space of a datatype is denoted by one or more literals
	in its lexical space.
""".

dt:ValueSpace rdfs:subClassOf rdfs:Class.  # Not for the squeamish ;-) set?


dt:lexicalSpace a rdf:Property;
	rdfs:domain dt:Datatype;
	rdfs:range dt:Literal;
	rdfs:comment """A lexical space is the set of valid literals for a datatype."""
dt:DataType daml:disjointUnionOf (
	dt:Primitive
	dt:Enumerated
	dt:Restriction
	dt:Combination ).

<> dt:example {
	[ a xdt:float;
	dt:representation "100";
	dt:representation "1.0e2"; ] }.

dt:representation a daml:UnambiguousProperty.

dt:canonicalRepresentation rdfs:subPropertyOf dt:representation;
	a daml:uniqueProperty;
	rdfs:comment """A canonical lexical representation is
a set of literals from among the valid set of literals for a datatype such that
there is a one-to-one mapping between literals in the canonical lexical representation
and values in the value space
".

dt:Facet
	rdfs:subClassOf rdf:Property;  #@@??
	rdfs:comment """A facet is a single defining aspect of a value space.
	Generally speaking, each facet characterizes a value space along independent
	axes or dimensions.
.  [One of the worst english definitions I have seen]""";

	disjointUnionOf ( FundamentalFacet ConstrainingFacet ).

dt:FundamentalFact rdfs:comment """A fundamental facet is an abstract property which serves to semantically characterize the values in a value space
""" .

dt:equal rdfs:comment """Every value space supports the notion of equality".
dt:notEqual rdfs:comment """either a is equal to b, [...], or a is not equal to b""".
#  Rules for facet 2.4.1.1  Equal
<> forall :a, :b, :c.
{ :a dt:equal :b . :a dt:notEqual :b } a log:Falsehood.
{ :a dt:equal b: } log:implies { b: dt:equal :a } .
{ :a dt:equal :a } a log:Truth .
{ :a dt:equal b:   .   :b dt:equal :c } log:implies { a: dt:equal :c } .

#  Missing: """ By definition, given value space A and value space B where A and B are
# not related by restriction, for every pair of values a from A and b from B, a != b. """
dt:BoundedValueSpace  rdfs:subClassOf  dt:OrderedValueSpace.

dt:equal rdfs:domain foo:setOfMembersOfAllInstancesOf  dt:OrderedValueSpace . #@@@
# where does it say how many datatypes something can have?

dt:ValueSpace disjointUnionOf ( dt:FiniteValueSpace dt:CountableInfiniteValueSpace) .
dt:ValueSpace disjointUnionOf ( dt:NumericValueSpace  dt:NonNumericValueSpace).
dt:NumericValueSpace rdfs:comment """A datatype is said to be numeric if its values are conceptually quantities (in some mathematical number system). 
[sic] Does this mean anything?""" .
############# Constrianing facets:
foobar a dt:length, dt:minLength, dt:maxLength, dt:pattern, dt:enumeration, dt:whitespace,
dt:WhiteSpace daml:oneOf ( dt:preserve  dt:replace dt:collapse).
# to 2.4.2.7 ish

listOf

 



