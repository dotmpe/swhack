     @prefix : <sameThing.n3#> .
     @prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
     @prefix dc: <http://purl.org/dc/elements/1.1/> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix ont: <http://www.daml.org/2001/03/daml+oil#> .
     @prefix rcs: <http://www.w3.org/2001/03swell/rcs#> .
     @prefix string: <http://www.w3.org/2000/10/swap/string#> .
    
    this     log:forAll <sameDan.n3#x>,
                :p,
                :q,
                :x,
                :y,
                :z;
         log:forSome <#_g0> .
    
    <#_g0>     <sameDan.n3#birthPlace> <sameDan.n3#KC>;
         <sameDan.n3#hairColor> <sameDan.n3#red>;
         = <#_g0>;
         contact:fullName "Dan Connolly";
         contact:homePage <http://www.w3.org/People/Connolly/>;
         contact:mailbox <mailto:connolly@w3.org> .
    
    <sameDan.n3>     dc:creator <#_g0>;
         dc:description """rules for determining when two terms denote
the same thing.""";
         dc:relation <forgetDups.n3>;
         dc:rights "copyright (c) 2001 W3C (MIT, Keio, INRIA)";
         rcs:id "" .
    
    <sameDan.n3#test1>     a <sameDan.n3#Success> .
    
    <sameThing.n3>     dc:creator <#_g0>;
         dc:description "substituion of equals for equals in triples, plus some rules for unambiguous/unique properties (@@that probably belong elsewhere)";
         dc:relation <forgetDups.n3>;
         dc:rights "copyright (c) 2001 W3C (MIT, Keio, INRIA)";
         rcs:id "" .
    
    contact:homePageAddress     a ont:UnambiguousProperty .
    
    contact:mailbox     a ont:UnambiguousProperty .
    {
        :p     a ont:UnambiguousProperty .
        
        }     log:implies {{
            :x     :p :z .
            :y     :p :z .
            
            }     log:implies {:x     = :y .
            } .
        } .
    {
        :p     a ont:UniqueProperty .
        
        }     log:implies {{
            :x     :p :y,
                        :z .
            
            }     log:implies {:y     = :z .
            } .
        } .
    {
        :x     = :y .
        
        }     log:implies {:y     = :x .
        } .
    {
        :x     = :z .
        
        }     log:implies {:x     = :z .
        } .
    {
        <sameDan.n3#x>     <sameDan.n3#birthPlace> <sameDan.n3#KC>;
             <sameDan.n3#hairColor> <sameDan.n3#red> .
        
        }     log:implies {<sameDan.n3#test1>     a <sameDan.n3#Success> .
        } .
    {
        :x     contact:homePageAddress :z .
        :y     contact:homePageAddress :z .
        
        }     log:implies {:x     = :y .
        } .
    {
        :x     contact:mailbox :z .
        :y     contact:mailbox :z .
        
        }     log:implies {:x     = :y .
        } .
    {
        :p     = :q;
             log:notEqualTo log:forAll,
                    log:forSome .
        :x     :p :y .
        
        }     log:implies {:x     :q :y .
        } .
    {
        :p     log:notEqualTo log:forAll,
                    log:forSome .
        :x     :p :y;
             = :z .
        
        }     log:implies {:z     :p :y .
        } .
    {
        :p     log:notEqualTo log:forAll,
                    log:forSome .
        :x     :p :y .
        :y     = :z .
        
        }     log:implies {:x     :p :z .
        } .
    
