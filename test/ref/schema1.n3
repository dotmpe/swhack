     @prefix : <schema-rules.n3#> .
     @prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
     @prefix ex: <daml-ex.n3#> .
     @prefix inv: <invalid-ex.n3#> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    
    this     log:forAll :c,
                :c1,
                :c2,
                :p,
                :p1,
                :p2,
                :x,
                :y,
                :z;
         log:forSome <#_g0> .
    
    <daml-ex.n3>     a daml:Ontology;
         daml:comment "An example ontology";
         daml:imports <http://www.daml.org/2000/10/daml-ont>;
         daml:versionInfo "" .
    
    ex:Adam     a daml:Person;
         daml:comment "Adam is a person.";
         daml:label "Adam" .
    
    ex:Animal     a daml:Class;
         daml:comment """This class of animals is illustrative of a number of
	ontological idioms.""";
         daml:label "Animal" .
    
    ex:Car     a daml:Class;
         daml:comment "no car is a person";
         daml:subClassOf <#_g0>;
         rdfs:subClassOf <#_g0> .
    
    ex:Female     a daml:Class;
         daml:disjointFrom ex:Male;
         daml:subClassOf ex:Animal;
         rdfs:subClassOf ex:Animal .
    
    ex:Height     a daml:Class;
         daml:oneOf  (
        ex:short 
        ex:medium 
        ex:tall  ) .
    
    ex:Male     a daml:Class;
         daml:subClassOf ex:Animal;
         rdfs:subClassOf ex:Animal .
    
    ex:Man     a daml:Class;
         daml:subClassOf ex:Male,
                ex:Person;
         rdfs:subClassOf ex:Animal,
                ex:Male,
                ex:Person .
    
    ex:Person     a daml:Class;
         daml:comment "every person is a man or a woman";
         daml:disjointUnionOf  (
        ex:Man 
        ex:Woman  );
         daml:restrictedBy  [
             a daml:Restriction;
             daml:onProperty ex:parent;
             daml:toClass ex:Person ];
         daml:subClassOf ex:Animal;
         rdfs:subClassOf ex:Animal .
    
    ex:TallMan     a daml:Class;
         daml:intersectionOf  (
        ex:TallThing 
        ex:Man  ) .
    
    ex:TallThing     a daml:Class;
         daml:restrictedBy  [
             a daml:Restriction;
             daml:onProperty ex:height;
             daml:toValue ex:tall ] .
    
    ex:Woman     a daml:Class;
         daml:subClassOf ex:Female,
                ex:Person;
         rdfs:subClassOf ex:Animal,
                ex:Female,
                ex:Person .
    
    ex:ancestor     a daml:TransitiveProperty;
         daml:label "ancestor" .
    
    ex:child     a daml:Property;
         daml:inverseOf ex:parent .
    
    ex:descendant     a daml:TransitiveProperty .
    
    ex:father     a daml:Property;
         daml:cardinality "1";
         daml:range ex:Man;
         daml:subProperty ex:parent;
         rdfs:range ex:Man .
    
    ex:height     a daml:Property;
         daml:domain ex:Person;
         daml:range ex:Height;
         rdfs:domain ex:Person;
         rdfs:range ex:Height .
    
    ex:mom     a daml:Property;
         = ex:mother .
    
    ex:mother     a daml:UniqueProperty;
         daml:range ex:Woman;
         daml:subProperty ex:parent;
         rdfs:range ex:Woman .
    
    ex:occupation     a daml:Property;
         daml:maxCardinality "1" .
    
    ex:parent     a daml:Property;
         daml:cardinality "2";
         daml:domain ex:Animal;
         rdfs:domain ex:Animal .
    
    <invalid-ex.n3>     daml:imports <daml-ex.n3> .
    
    inv:alex     ex:father inv:joe .
    
    inv:bill     ex:mother inv:joe .
    
    inv:disjointTest     a ex:Animal,
                ex:Female,
                ex:Male,
                ex:Man,
                ex:Person,
                ex:Woman,
                :schemaInconsistency .
    
    inv:joe     a ex:Animal,
                ex:Female,
                ex:Male,
                ex:Man,
                ex:Person,
                ex:Woman,
                :schemaInconsistency .
    
    :schemaInconsistency     daml:subPropertyOf log:Falsehood;
         rdfs:subPropertyOf log:Falsehood .
    
    daml:domain     = rdfs:domain .
    
    daml:range     = rdfs:range .
    
    daml:subClassOf     = rdfs:subClassOf .
    
    daml:subPropertyOf     = rdfs:subPropertyOf .
    
    rdfs:subClassOf     a daml:TransitiveProperty .
    
    rdfs:subPropertyOf     a daml:TransitiveProperty .
    
    <#_g0>     a daml:Class;
         daml:complementOf ex:Person .
    {
        :p     a daml:TransitiveProperty .
        
        }     log:implies {this     log:forAll :x,
                    :y,
                    :z .
        {
            :x     :p :y .
            :y     :p :z .
            
            }     log:implies {:x     :p :z .
            } .
        } .
    {
        :c1     rdfs:subClassOf :c2 .
        :x     a :c1 .
        
        }     log:implies {:x     a :c2 .
        } .
    {
        :p     rdfs:domain :c .
        :x     :p :y .
        
        }     log:implies {:x     a :c .
        } .
    {
        :p     rdfs:range :c .
        :x     :p :y .
        
        }     log:implies {:y     a :c .
        } .
    {
        :p1     rdfs:range :c .
        :p2     rdfs:subPropertyOf :p1 .
        
        }     log:implies {:p2     rdfs:range :c .
        } .
    {
        :p1     = :p2 .
        :x     :p1 :y .
        
        }     log:implies {:x     :p2 :y .
        } .
    {
        :x     ex:ancestor :y .
        :y     ex:ancestor :z .
        
        }     log:implies {:x     ex:ancestor :z .
        } .
    {
        :x     ex:descendant :y .
        :y     ex:descendant :z .
        
        }     log:implies {:x     ex:descendant :z .
        } .
    {
        :x     rdfs:subClassOf :y .
        :y     rdfs:subClassOf :z .
        
        }     log:implies {:x     rdfs:subClassOf :z .
        } .
    {
        :x     rdfs:subPropertyOf :y .
        :y     rdfs:subPropertyOf :z .
        
        }     log:implies {:x     rdfs:subPropertyOf :z .
        } .
    {
        :x     a :y,
                    :z .
        :y     daml:disjointFrom :z .
        
        }     log:implies {:x     a :schemaInconsistency .
        } .
    
