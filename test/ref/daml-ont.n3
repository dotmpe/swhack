     @prefix : <daml-ont.rdf#> .
     @prefix daml: <http://www.daml.org/2001/03/daml-ont#> .
     @prefix dpo: <http://www.daml.org/2001/03/daml+oil#> .
     @prefix ex: <http://www.daml.org/2001/03/daml-ex#> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
     @prefix rdfs: <http://www.w3.org/2001/03/rdf-schema#> .
     @prefix s: <http://www.w3.org/2000/01/rdf-schema#> .
    
    :Class     a daml:Class;
         daml:sameClassAs s:Class .
    
    :Disjoint     a daml:Class;
         daml:comment """for type(L, Disjoint) read: the classes in L are
  pairwise disjoint.

  i.e. if type(L, Disjoint), and C1 in L and C2 in L, then disjointWith(C1, C2).
  """;
         daml:label "Disjoint";
         daml:subClassOf :List .
    
    :Empty     a daml:Class;
         daml:asClass :Nothing .
    
    :List     a daml:Class;
         daml:subClassOf rdf:Seq .
    
    :Literal     a daml:Class;
         daml:sameClassAs s:Literal .
    
    :Nothing     a daml:Class;
         daml:comment "the class with no things in it.";
         daml:complementOf :Thing .
    
    :Ontology     a daml:Class;
         daml:comment """An Ontology is a document that describes
	a vocabulary of terms for communication between
	(human and) automated agents.
  """;
         daml:label "Ontology" .
    
    :Property     a daml:Class;
         daml:sameClassAs rdf:Property .
    
    :Qualification     a daml:Class .
    
    :Restriction     a daml:Class .
    
    :Thing     a daml:Class;
         daml:comment "The most general class in DAML.";
         daml:label "Thing" .
    
    :TransitiveProperty     a daml:Class .
    
    :UnambiguousProperty     a daml:Class;
         daml:comment """if P is an UnambiguousProperty, then
	if P(x, y) and P(z, y) then x=z.
	aka injective.
	e.g. if nameOfMonth(m, \"Feb\")
	and nameOfMonth(n, \"Feb\") then m and n are the same month.
  """;
         daml:label "UnambiguousProperty";
         daml:subClassOf :Property .
    
    :UniqueProperty     a daml:Class;
         daml:comment """compare with maxCardinality=1; e.g. integer successor:
	if P is a UniqueProperty, then
	if P(x, y) and P(x, z) then y=z.
	aka functional.
  """;
         daml:label "UniqueProperty";
         daml:subClassOf :Property .
    
    :cardinality     a daml:Property;
         daml:comment """for cardinality(P, N) read: P has cardinality N; i.e.
    everything x in the domain of P has N things y such that P(x, y).
  """;
         daml:domain :Property;
         daml:label "cardinality" .
    
    :comment     a daml:Property;
         daml:samePropertyAs s:comment .
    
    :complementOf     a daml:Property;
         daml:comment """
    for complementOf(X, Y) read: X is the complement of Y; if something is in Y,
    then it's not in X, and vice versa.
cf OIL NOT""";
         daml:domain :Class;
         daml:range :Class .
    
    :default     a daml:Property;
         daml:comment """default(X, Y) suggests that Y be considered a/the default
	value for the X property. This can be considered
	documentation (ala label, comment) but we don't specify
	any logical impact.
  """;
         daml:label "default" .
    
    :disjointUnionOf     a daml:Property;
         daml:comment """

    for disjointUnionOf(X, Y) read: X is the disjoint union of the classes in
    the list Y: (a) for any c1 and c2 in Y, disjointWith(c1, c2),
    and (b) i.e. if something is in any of the classes in Y, it's
    in X, and vice versa.

    cf OIL disjoint-covered
  """;
         daml:domain :Class;
         daml:label "disjointUnionOf";
         daml:range :List .
    
    :disjointWith     a daml:Property;
         daml:comment """for disjointWith(X, Y) read: X and Y have no members
	in common.
  """;
         daml:domain :Class;
         daml:label "disjointWith";
         daml:range :Class .
    
    :domain     a daml:Property;
         daml:samePropertyAs s:domain .
    
    :equivalentTo     a daml:Property;
         daml:comment """for equivalentTo(X, Y), read X is an equivalent term to Y.
  """ .
    
    :first     a daml:Property;
         daml:domain :List .
    
    :hasValue     a daml:Property;
         daml:comment """for hasValue(Q, C), read: Q is a hasValue
   qualification to C.""";
         daml:domain :Qualification;
         daml:label "hasValue";
         daml:range :Class .
    
    :imports     a daml:Property;
         daml:comment """for imports(X, Y) read: X imports Y;
	i.e. X asserts the* contents of Y by reference;
	i.e. if imports(X, Y) and you believe X and Y says something,
	then you should believe it.

	Note: \"the contents\" is, in the general case,
	an il-formed definite description. Different
	interactions with a resource may expose contents
	that vary with time, data format, preferred language,
	requestor credentials, etc. So for \"the contents\",
	read \"any contents\".
  """;
         daml:label "imports" .
    
    :intersectionOf     a daml:Property;
         daml:comment """
    for intersectionOf(X, Y) read: X is the intersection of the classes in the list Y;
    i.e. if something is in all the classes in Y, then it's in X, and vice versa.
cf OIL AND""";
         daml:domain :Class;
         daml:range :List .
    
    :inverseOf     a daml:Property;
         daml:comment """for inverseOf(R, S) read: R is the inverse of S; i.e.
     if R(x, y) then S(y, x) and vice versa.""";
         daml:domain :Property;
         daml:range :Property .
    
    :isDefinedBy     a daml:Property;
         daml:samePropertyAs s:isDefinedBy;
         daml:subPropertyOf :seeAlso .
    
    :item     a daml:Property;
         daml:comment """for item(L, I) read: I is an item in L; either first(L, I)
    or item(R, I) where rest(L, R).""";
         daml:domain :List .
    
    :label     a daml:Property;
         daml:samePropertyAs s:label .
    
    :maxCardinality     a daml:Property;
         daml:comment """for maxCardinality(P, N) read: P has maximum cardinality N; i.e.
    everything x in the domain of P has at most N things y such that P(x, y).
  """;
         daml:domain :Property;
         daml:label "maxCardinality" .
    
    :minCardinality     a daml:Property;
         daml:comment """for minCardinality(P, N) read: P has minimum cardinality N; i.e.
    everything x in the domain of P has at least N things y such that P(x, y).
  """;
         daml:domain :Property .
    
    :onProperty     a daml:Property;
         daml:comment """for onProperty(R, P), read:
   R is a restriction/qualification on P.""";
         daml:domain :Qualification,
                :Restriction;
         daml:range :Property .
    
    :oneOf     a daml:Property;
         daml:comment """for oneOf(C, L) read everything in C is one of the
     things in L;
     This lets us define classes by enumerating the members.
  """;
         daml:domain :Class;
         daml:range :List .
    
    :qualifiedBy     a daml:Property;
         daml:comment """for qualifiedBy(C, Q), read: C is qualified by Q; i.e. the
	qualification Q applies to C;

        if onProperty(Q, P) and hasValue(Q, C2)
        then for every i in C, there is some V
	so that type(V, C2) and P(i, V).
  """;
         daml:domain :Class;
         daml:label "qualifiedBy";
         daml:range :Qualification .
    
    :range     a daml:Property;
         daml:samePropertyAs s:range .
    
    :rest     a daml:Property;
         daml:domain :List;
         daml:range :List .
    
    :restrictedBy     a daml:Property;
         daml:comment """for restrictedBy(C, R), read: C is restricted by R; i.e. the
	restriction R applies to c;

        if onProperty(R, P) and toValue(R, V)
        then for every i in C, we have P(i, V).

        if onProperty(R, P) and toClass(R, C2)
        then for every i in C and for all j, if P(i, j) then type(j, C2).
  """;
         daml:domain :Class;
         daml:label "restrictedBy";
         daml:range :Restriction .
    
    :sameClassAs     a daml:Property;
         daml:subPropertyOf :equivalentTo,
                :subClassOf .
    
    :samePropertyAs     a daml:Property;
         daml:subPropertyOf :equivalentTo,
                :subPropertyOf .
    
    :seeAlso     a daml:Property;
         daml:samePropertyAs s:seeAlso .
    
    :subClassOf     a daml:Property;
         daml:samePropertyAs s:subClassOf .
    
    :subPropertyOf     a daml:Property;
         daml:samePropertyAs s:subPropertyOf;
         daml:subPropertyOf s:subPropertyOf .
    
    :toClass     a daml:Property;
         daml:comment "for toClass(R, C), read: R is a restriction to C.";
         daml:domain :Restriction;
         daml:range :Class .
    
    :toValue     a daml:Property;
         daml:comment "for toValue(R, V), read: R is a restriction to V.";
         daml:domain :Restriction;
         daml:range :Class .
    
    :type     a daml:Property;
         daml:samePropertyAs rdf:type .
    
    :unionOf     a daml:Property;
         daml:comment """
    for unionOf(X, Y) read: X is the union of the classes in the list Y;
    i.e. if something is in any of the classes in Y, it's in X, and vice versa.
    cf OIL OR""";
         daml:domain :Class;
         daml:label "unionOf";
         daml:range :List .
    
    :value     a daml:Property;
         daml:samePropertyAs rdf:value .
    
    :versionInfo     a daml:Property;
         daml:comment """generally, a string giving information about this
	version; e.g. RCS/CVS keywords
  """;
         daml:label "versionInfo" .
    
    <daml-ont.rdf>     a daml:Ontology;
         daml:imports <http://www.w3.org/2000/01/rdf-schema>;
         daml:versionInfo "" .
    
