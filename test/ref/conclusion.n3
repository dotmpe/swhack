     @prefix : <../daml-ex.n3#> .
     @prefix daml: <http://www.daml.org/2000/10/daml-ont#> .
     @prefix dpo: <http://www.daml.org/2001/03/daml+oil#> .
     @prefix ex: <http://www.daml.org/2000/10/daml-ex#> .
     @prefix foo: <foo.n3#> .
     @prefix local: <t10.n3#> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
     @prefix s: <http://www.w3.org/2000/01/rdf-schema#> .
     @prefix v: <../schema-rules.n3#> .
    
    this     log:forAll foo:F,
                foo:G,
                foo:d,
                foo:x,
                foo:y .
    
    foo:result     foo:is {this     log:forAll v:c,
                    v:c1,
                    v:c2,
                    v:p,
                    v:p1,
                    v:p2,
                    v:x,
                    v:y,
                    v:z;
             log:forSome <#_g0> .
        <../daml-ex.n3>     a dpo:Ontology;
             dpo:comment "An example ontology";
             dpo:imports <http://www.daml.org/2000/10/daml-ont>;
             dpo:versionInfo "" .
        :Adam     a dpo:Person;
             dpo:comment "Adam is a person.";
             dpo:label "Adam" .
        :Animal     a dpo:Class;
             dpo:comment """This class of animals is illustrative of a number of
	ontological idioms.""";
             dpo:label "Animal" .
        :Car     a dpo:Class;
             dpo:comment "no car is a person";
             dpo:subClassOf <#_g0>;
             s:subClassOf <#_g0> .
        :Female     a dpo:Class;
             dpo:disjointFrom :Male;
             dpo:subClassOf :Animal;
             s:subClassOf :Animal .
        :Height     a dpo:Class;
             dpo:oneOf  (
            :short 
            :medium 
            :tall  ) .
        :Male     a dpo:Class;
             dpo:subClassOf :Animal;
             s:subClassOf :Animal .
        :Man     a dpo:Class;
             dpo:subClassOf :Male,
                    :Person;
             s:subClassOf :Animal,
                    :Male,
                    :Person .
        :Person     a dpo:Class;
             dpo:comment "every person is a man or a woman";
             dpo:disjointUnionOf  (
            :Man 
            :Woman  );
             dpo:restrictedBy  [
                 a dpo:Restriction;
                 dpo:onProperty :parent;
                 dpo:toClass :Person ];
             dpo:subClassOf :Animal;
             s:subClassOf :Animal .
        :TallMan     a dpo:Class;
             dpo:intersectionOf  (
            :TallThing 
            :Man  ) .
        :TallThing     a dpo:Class;
             dpo:restrictedBy  [
                 a dpo:Restriction;
                 dpo:onProperty :height;
                 dpo:toValue :tall ] .
        :Woman     a dpo:Class;
             dpo:subClassOf :Female,
                    :Person;
             s:subClassOf :Animal,
                    :Female,
                    :Person .
        :ancestor     a dpo:TransitiveProperty;
             dpo:label "ancestor" .
        :child     a dpo:Property;
             dpo:inverseOf :parent .
        :descendant     a dpo:TransitiveProperty .
        :father     a dpo:Property;
             dpo:cardinality "1";
             dpo:range :Man;
             dpo:subProperty :parent;
             s:range :Man .
        :height     a dpo:Property;
             dpo:domain :Person;
             dpo:range :Height;
             s:domain :Person;
             s:range :Height .
        :mom     a dpo:Property;
             = :mother .
        :mother     a dpo:UniqueProperty;
             dpo:range :Woman;
             dpo:subProperty :parent;
             s:range :Woman .
        :occupation     a dpo:Property;
             dpo:maxCardinality "1" .
        :parent     a dpo:Property;
             dpo:cardinality "2";
             dpo:domain :Animal;
             s:domain :Animal .
        <#_g0>     a dpo:Class;
             dpo:complementOf :Person .
        <../invalid-ex.n3>     dpo:imports <../daml-ex.n3> .
        <../invalid-ex.n3#alex>     :father <../invalid-ex.n3#joe> .
        <../invalid-ex.n3#bill>     :mother <../invalid-ex.n3#joe> .
        <../invalid-ex.n3#disjointTest>     a :Animal,
                    :Female,
                    :Male,
                    :Man,
                    :Person,
                    :Woman,
                    v:schemaInconsistency .
        <../invalid-ex.n3#joe>     a :Animal,
                    :Female,
                    :Male,
                    :Man,
                    :Person,
                    :Woman,
                    v:schemaInconsistency .
        v:schemaInconsistency     dpo:subPropertyOf log:Falsehood;
             s:subPropertyOf log:Falsehood .
        dpo:domain     = s:domain .
        dpo:range     = s:range .
        dpo:subClassOf     = s:subClassOf .
        dpo:subPropertyOf     = s:subPropertyOf .
        s:subClassOf     a dpo:TransitiveProperty .
        s:subPropertyOf     a dpo:TransitiveProperty .
        {
            v:p     a dpo:TransitiveProperty .
            
            }     log:implies {{
                {
                    v:x     v:p v:y .
                    v:y     v:p v:z .
                    
                    }     log:implies {v:x     v:p v:z .
                    } .
                
                }     a log:Truth;
                 log:forAll v:x,
                        v:y,
                        v:z .
            } .
        {
            {
                v:x     :ancestor v:y .
                v:y     :ancestor v:z .
                
                }     log:implies {v:x     :ancestor v:z .
                } .
            
            }     a log:Truth;
             log:forAll v:x,
                    v:y,
                    v:z .
        {
            {
                v:x     :descendant v:y .
                v:y     :descendant v:z .
                
                }     log:implies {v:x     :descendant v:z .
                } .
            
            }     a log:Truth;
             log:forAll v:x,
                    v:y,
                    v:z .
        {
            {
                v:x     s:subClassOf v:y .
                v:y     s:subClassOf v:z .
                
                }     log:implies {v:x     s:subClassOf v:z .
                } .
            
            }     a log:Truth;
             log:forAll v:x,
                    v:y,
                    v:z .
        {
            {
                v:x     s:subPropertyOf v:y .
                v:y     s:subPropertyOf v:z .
                
                }     log:implies {v:x     s:subPropertyOf v:z .
                } .
            
            }     a log:Truth;
             log:forAll v:x,
                    v:y,
                    v:z .
        {
            v:c1     s:subClassOf v:c2 .
            v:x     a v:c1 .
            
            }     log:implies {v:x     a v:c2 .
            } .
        {
            v:p     s:domain v:c .
            v:x     v:p v:y .
            
            }     log:implies {v:x     a v:c .
            } .
        {
            v:p     s:range v:c .
            v:x     v:p v:y .
            
            }     log:implies {v:y     a v:c .
            } .
        {
            v:p1     = v:p2 .
            v:x     v:p1 v:y .
            
            }     log:implies {v:x     v:p2 v:y .
            } .
        {
            v:p1     s:range v:c .
            v:p2     s:subPropertyOf v:p1 .
            
            }     log:implies {v:p2     s:range v:c .
            } .
        {
            v:x     a v:y,
                        v:z .
            v:y     dpo:disjointFrom v:z .
            
            }     log:implies {v:x     a v:schemaInconsistency .
            } .
        } .
    {
        this     log:forSome <#_g1>,
                    <#_g2>,
                    <#_g3> .
        <../daml-ex.n3>     log:semantics <#_g1> .
          ( <#_g1> 
            <#_g2> 
            <#_g3>  )
             log:conjunction  [
                 log:conclusion foo:G ] .
        <../invalid-ex.n3>     log:semantics <#_g2> .
        <../schema-rules.n3>     log:semantics <#_g3> .
        
        }     log:implies {foo:result     foo:is foo:G .
        } .
    
