#Processed by Id: cwm.py,v 1.165 2004/11/19 01:58:39 syosi Exp 
        #    using base file:/devel/WWW/2000/10/swap/grammar/
        
#  Notation3 generation by
#       notation3.py,v 1.166 2004/10/28 17:41:59 timbl Exp

#   Base was: file:/devel/WWW/2000/10/swap/grammar/
     @prefix : <http://www.w3.org/2000/10/swap/grammar/n3#> .
     @prefix cfg: <http://www.w3.org/2000/10/swap/grammar/bnf#> .
     @prefix h: <http://www.w3.org/2000/10/swap/grammar/bnf2html#> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix rul: <http://www.w3.org/2000/10/swap/grammar/bnf-rules#> .
    
     @forSome <#_g0>,
                <#_g1>,
                <#_g2>,
                <#_g3>,
                <#_g4>,
                <#_g5> .
    
    "!"     h:reference """<b><code>"!"</code></b>""" .
    
    "("     h:reference """<b><code>"("</code></b>""" .
    
    ")"     h:reference """<b><code>")"</code></b>""" .
    
    ","     h:reference """<b><code>","</code></b>""" .
    
    "."     h:reference """<b><code>"."</code></b>""" .
    
    ";"     h:reference """<b><code>";"</code></b>""" .
    
    "<="     h:reference """<b><code>"<="</code></b>""" .
    
    "="     h:reference """<b><code>"="</code></b>""" .
    
    "=>"     h:reference """<b><code>"=>"</code></b>""" .
    
    "@"     h:reference """<b><code>"@"</code></b>""" .
    
    "@a"     h:reference """<b><code>"@a"</code></b>""" .
    
    "@forAll"     h:reference """<b><code>"@forAll"</code></b>""" .
    
    "@forSome"     h:reference """<b><code>"@forSome"</code></b>""" .
    
    "@has"     h:reference """<b><code>"@has"</code></b>""" .
    
    "@is"     h:reference """<b><code>"@is"</code></b>""" .
    
    "@keywords"     h:reference """<b><code>"@keywords"</code></b>""" .
    
    "@of"     h:reference """<b><code>"@of"</code></b>""" .
    
    "@prefix"     h:reference """<b><code>"@prefix"</code></b>""" .
    
    "@this"     h:reference """<b><code>"@this"</code></b>""" .
    
    "["     h:reference """<b><code>"["</code></b>""" .
    
    "]"     h:reference """<b><code>"]"</code></b>""" .
    
    "^"     h:reference """<b><code>"^"</code></b>""" .
    
    "^^"     h:reference """<b><code>"^^"</code></b>""" .
    
    "{"     h:reference """<b><code>"{"</code></b>""" .
    
    "}"     h:reference """<b><code>"}"</code></b>""" .
    
    ()     a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<em>void</em>" .
      ( "!" 
        :path  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"!"</code></b> <a href='#path'>path</a>""" .
      ( "(" 
        :pathlist 
        ")"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( ")"  )
         a h:SequenceTail;
         h:seqlabel """<b><code>")"</code></b>""" .
      ( "," 
        :barename 
        <#_g5>  )
         a h:Sequence,
                h:SequenceTail .
      ( "," 
        :object 
        :objecttail  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a>""" .
      ( "," 
        :symbol 
        <#_g3>  )
         a h:Sequence,
                h:SequenceTail .
      ( "," 
        :symbol 
        <#_g4>  )
         a h:Sequence,
                h:SequenceTail .
      ( "." 
        :statementlist  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"."</code></b> <a href='#statementlist'>statementlist</a>""" .
      ( "." 
        :statements_optional  )
         a h:SequenceTail;
         h:seqlabel """<b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( "0" 
        0  )
         log:outputString """<html>
<head>
   <title>BNF</title>
</head>
<body>
  <h1>BNF</h1>
  <p>Productions are in normal type, linked to their definitions.<br />
    <em>Regular expressions are in italics</em><br />
    <b><code>Literal characters in quoted in bold</code></b><br />
    <em>void</em> means an empty production.
  </p>
  <dl>
""" .
      ( ";" 
        :propertylist  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>";"</code></b> <a href='#propertylist'>propertylist</a>""" .
      ( "<="  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"<="</code></b>""" .
      ( "="  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"="</code></b>""" .
      ( "=>"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"=>"</code></b>""" .
      ( "@" 
        :langcode  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@"</code></b> <a href='#langcode'>langcode</a>""" .
      ( "@a"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@a"</code></b>""" .
      ( "@forAll" 
        <#_g0>  )
         a h:Sequence,
                h:SequenceTail .
      ( "@forSome" 
        <#_g1>  )
         a h:Sequence,
                h:SequenceTail .
      ( "@has" 
        :path  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@has"</code></b> <a href='#path'>path</a>""" .
      ( "@is" 
        :path 
        "@of"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@is"</code></b> <a href='#path'>path</a> <b><code>"@of"</code></b>""" .
      ( "@keywords" 
        <#_g2>  )
         a h:Sequence,
                h:SequenceTail .
      ( "@of"  )
         a h:SequenceTail;
         h:seqlabel """<b><code>"@of"</code></b>""" .
      ( "@prefix" 
        :prefix 
        :explicituri  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@prefix"</code></b> <a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a>""" .
      ( "@this"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@this"</code></b>""" .
      ( "[" 
        :propertylist 
        "]"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( "]"  )
         a h:SequenceTail;
         h:seqlabel """<b><code>"]"</code></b>""" .
      ( "^" 
        :path  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"^"</code></b> <a href='#path'>path</a>""" .
      ( "^^" 
        :symbol  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"^^"</code></b> <a href='#symbol'>symbol</a>""" .
      ( "barename" 
        0  )
         log:outputString """  <dt><a name='barename'>barename</a></dt><dd>
""" .
      ( "barename" 
        6  )
         log:outputString """	<p><em>[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "barename" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "declaration" 
        0  )
         log:outputString """  <dt><a name='declaration'>declaration</a></dt><dd>
""" .
      ( "declaration" 
        5  )
         log:outputString """		<p><b><code>"@prefix"</code></b> <a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a></p>
""" .
      ( "declaration" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "document" 
        0  )
         log:outputString """  <dt><a name='document'>document</a></dt><dd>
""" .
      ( "document" 
        5  )
         log:outputString """		<p><a href='#statements_optional'>statements_optional</a> <em>EOF</em></p>
""" .
      ( "document" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "dtlang" 
        0  )
         log:outputString """  <dt><a name='dtlang'>dtlang</a></dt><dd>
""" .
      ( "dtlang" 
        5  )
         log:outputString """		<p><b><code>"@"</code></b> <a href='#langcode'>langcode</a></p>
""",
                """		<p><b><code>"^^"</code></b> <a href='#symbol'>symbol</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "dtlang" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "existential" 
        0  )
         log:outputString """  <dt><a name='existential'>existential</a></dt><dd>
""" .
      ( "existential" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "explicituri" 
        0  )
         log:outputString """  <dt><a name='explicituri'>explicituri</a></dt><dd>
""" .
      ( "explicituri" 
        6  )
         log:outputString """	<p><em><[^>]*></em></p>
""" .
      ( "explicituri" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "formulacontent" 
        0  )
         log:outputString """  <dt><a name='formulacontent'>formulacontent</a></dt><dd>
""" .
      ( "formulacontent" 
        5  )
         log:outputString """		<p><a href='#statementlist'>statementlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "formulacontent" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "langcode" 
        0  )
         log:outputString """  <dt><a name='langcode'>langcode</a></dt><dd>
""" .
      ( "langcode" 
        6  )
         log:outputString """	<p><em>[a-z]+(-[a-z0-9]+)*</em></p>
""" .
      ( "langcode" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "literal" 
        0  )
         log:outputString """  <dt><a name='literal'>literal</a></dt><dd>
""" .
      ( "literal" 
        5  )
         log:outputString """		<p><a href='#string'>string</a> <a href='#dtlang'>dtlang</a></p>
""" .
      ( "literal" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "node" 
        0  )
         log:outputString """  <dt><a name='node'>node</a></dt><dd>
""" .
      ( "node" 
        5  )
         log:outputString """		<p><a href='#literal'>literal</a></p>
""",
                """		<p><a href='#numericliteral'>numericliteral</a></p>
""",
                """		<p><a href='#symbol'>symbol</a></p>
""",
                """		<p><a href='#variable'>variable</a></p>
""",
                """		<p><b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b></p>
""",
                """		<p><b><code>"@this"</code></b></p>
""",
                """		<p><b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b></p>
""",
                """		<p><b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b></p>
""" .
      ( "node" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "numericliteral" 
        0  )
         log:outputString """  <dt><a name='numericliteral'>numericliteral</a></dt><dd>
""" .
      ( "numericliteral" 
        6  )
         log:outputString """	<p><em>[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?</em></p>
""" .
      ( "numericliteral" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "object" 
        0  )
         log:outputString """  <dt><a name='object'>object</a></dt><dd>
""" .
      ( "object" 
        5  )
         log:outputString """		<p><a href='#path'>path</a></p>
""" .
      ( "object" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "objecttail" 
        0  )
         log:outputString """  <dt><a name='objecttail'>objecttail</a></dt><dd>
""" .
      ( "objecttail" 
        5  )
         log:outputString """		<p><b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "objecttail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "path" 
        0  )
         log:outputString """  <dt><a name='path'>path</a></dt><dd>
""" .
      ( "path" 
        5  )
         log:outputString """		<p><a href='#node'>node</a> <a href='#pathtail'>pathtail</a></p>
""" .
      ( "path" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "pathlist" 
        0  )
         log:outputString """  <dt><a name='pathlist'>pathlist</a></dt><dd>
""" .
      ( "pathlist" 
        5  )
         log:outputString """		<p><a href='#path'>path</a> <a href='#pathlist'>pathlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathlist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "pathtail" 
        0  )
         log:outputString """  <dt><a name='pathtail'>pathtail</a></dt><dd>
""" .
      ( "pathtail" 
        5  )
         log:outputString """		<p><b><code>"!"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><b><code>"^"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathtail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "prefix" 
        0  )
         log:outputString """  <dt><a name='prefix'>prefix</a></dt><dd>
""" .
      ( "prefix" 
        6  )
         log:outputString """	<p><em>([a-zA-Z_][a-zA-Z0-9_]*)?:</em></p>
""" .
      ( "prefix" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "propertylist" 
        0  )
         log:outputString """  <dt><a name='propertylist'>propertylist</a></dt><dd>
""" .
      ( "propertylist" 
        5  )
         log:outputString """		<p><a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "propertylisttail" 
        0  )
         log:outputString """  <dt><a name='propertylisttail'>propertylisttail</a></dt><dd>
""" .
      ( "propertylisttail" 
        5  )
         log:outputString """		<p><b><code>";"</code></b> <a href='#propertylist'>propertylist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylisttail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "qname" 
        0  )
         log:outputString """  <dt><a name='qname'>qname</a></dt><dd>
""" .
      ( "qname" 
        6  )
         log:outputString """	<p><em>(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?</em></p>
""" .
      ( "qname" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "simpleStatement" 
        0  )
         log:outputString """  <dt><a name='simpleStatement'>simpleStatement</a></dt><dd>
""" .
      ( "simpleStatement" 
        5  )
         log:outputString """		<p><a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a></p>
""" .
      ( "simpleStatement" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statement" 
        0  )
         log:outputString """  <dt><a name='statement'>statement</a></dt><dd>
""" .
      ( "statement" 
        5  )
         log:outputString """		<p><a href='#declaration'>declaration</a></p>
""",
                """		<p><a href='#existential'>existential</a></p>
""",
                """		<p><a href='#simpleStatement'>simpleStatement</a></p>
""",
                """		<p><a href='#universal'>universal</a></p>
""" .
      ( "statement" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statementlist" 
        0  )
         log:outputString """  <dt><a name='statementlist'>statementlist</a></dt><dd>
""" .
      ( "statementlist" 
        5  )
         log:outputString """		<p><a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementlist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statements_optional" 
        0  )
         log:outputString """  <dt><a name='statements_optional'>statements_optional</a></dt><dd>
""" .
      ( "statements_optional" 
        5  )
         log:outputString """		<p><a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statements_optional" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statementtail" 
        0  )
         log:outputString """  <dt><a name='statementtail'>statementtail</a></dt><dd>
""" .
      ( "statementtail" 
        5  )
         log:outputString """		<p><b><code>"."</code></b> <a href='#statementlist'>statementlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementtail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "string" 
        0  )
         log:outputString """  <dt><a name='string'>string</a></dt><dd>
""" .
      ( "string" 
        6  )
         log:outputString """	<p><em>(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")</em></p>
""" .
      ( "string" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "subject" 
        0  )
         log:outputString """  <dt><a name='subject'>subject</a></dt><dd>
""" .
      ( "subject" 
        5  )
         log:outputString """		<p><a href='#path'>path</a></p>
""" .
      ( "subject" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "symbol" 
        0  )
         log:outputString """  <dt><a name='symbol'>symbol</a></dt><dd>
""" .
      ( "symbol" 
        5  )
         log:outputString """		<p><a href='#explicituri'>explicituri</a></p>
""",
                """		<p><a href='#qname'>qname</a></p>
""" .
      ( "symbol" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "universal" 
        0  )
         log:outputString """  <dt><a name='universal'>universal</a></dt><dd>
""" .
      ( "universal" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "variable" 
        0  )
         log:outputString """  <dt><a name='variable'>variable</a></dt><dd>
""" .
      ( "variable" 
        6  )
         log:outputString """	<p><em>\\?[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "variable" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "verb" 
        0  )
         log:outputString """  <dt><a name='verb'>verb</a></dt><dd>
""" .
      ( "verb" 
        5  )
         log:outputString """		<p><a href='#path'>path</a></p>
""",
                """		<p><b><code>"<="</code></b></p>
""",
                """		<p><b><code>"="</code></b></p>
""",
                """		<p><b><code>"=>"</code></b></p>
""",
                """		<p><b><code>"@a"</code></b></p>
""",
                """		<p><b><code>"@has"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><b><code>"@is"</code></b> <a href='#path'>path</a> <b><code>"@of"</code></b></p>
""" .
      ( "verb" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "{" 
        :formulacontent 
        "}"  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "}"  )
         a h:SequenceTail;
         h:seqlabel """<b><code>"}"</code></b>""" .
      ( "~~" 
        9  )
         log:outputString "\n</dl>\n</html>\n" .
      ( cfg:eof  )
         a h:SequenceTail;
         h:seqlabel "<em>EOF</em>" .
      ( :barename 
        <#_g5>  )
         a h:Sequence,
                h:SequenceTail .
      ( :declaration  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#declaration'>declaration</a>" .
      ( :dtlang  )
         a h:SequenceTail;
         h:seqlabel "<a href='#dtlang'>dtlang</a>" .
      ( :existential  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#existential'>existential</a>" .
      ( :explicituri  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#explicituri'>explicituri</a>" .
      ( :formulacontent 
        "}"  )
         a h:SequenceTail;
         h:seqlabel """<a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( :langcode  )
         a h:SequenceTail;
         h:seqlabel "<a href='#langcode'>langcode</a>" .
      ( :literal  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#literal'>literal</a>" .
      ( :node 
        :pathtail  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#node'>node</a> <a href='#pathtail'>pathtail</a>" .
      ( :numericliteral  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#numericliteral'>numericliteral</a>" .
      ( :object 
        :objecttail 
        :propertylisttail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( :object 
        :objecttail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a>" .
      ( :objecttail 
        :propertylisttail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( :objecttail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#objecttail'>objecttail</a>" .
      ( :path 
        "@of"  )
         a h:SequenceTail;
         h:seqlabel """<a href='#path'>path</a> <b><code>"@of"</code></b>""" .
      ( :path 
        :pathlist  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#path'>path</a> <a href='#pathlist'>pathlist</a>" .
      ( :path  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#path'>path</a>" .
      ( :pathlist 
        ")"  )
         a h:SequenceTail;
         h:seqlabel """<a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( :pathlist  )
         a h:SequenceTail;
         h:seqlabel "<a href='#pathlist'>pathlist</a>" .
      ( :pathtail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#pathtail'>pathtail</a>" .
      ( :prefix 
        :explicituri  )
         a h:SequenceTail;
         h:seqlabel "<a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a>" .
      ( :propertylist 
        "]"  )
         a h:SequenceTail;
         h:seqlabel """<a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( :propertylist  )
         a h:SequenceTail;
         h:seqlabel "<a href='#propertylist'>propertylist</a>" .
      ( :propertylisttail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#propertylisttail'>propertylisttail</a>" .
      ( :qname  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#qname'>qname</a>" .
      ( :simpleStatement  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#simpleStatement'>simpleStatement</a>" .
      ( :statement 
        "." 
        :statements_optional  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( :statement 
        :statementtail  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a>" .
      ( :statementlist  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statementlist'>statementlist</a>" .
      ( :statements_optional 
        cfg:eof  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( :statements_optional  )
         a h:SequenceTail;
         h:seqlabel "<a href='#statements_optional'>statements_optional</a>" .
      ( :statementtail  )
         a h:SequenceTail;
         h:seqlabel "<a href='#statementtail'>statementtail</a>" .
      ( :string 
        :dtlang  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#string'>string</a> <a href='#dtlang'>dtlang</a>" .
      ( :subject 
        :propertylist  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a>" .
      ( :symbol 
        <#_g3>  )
         a h:Sequence,
                h:SequenceTail .
      ( :symbol 
        <#_g4>  )
         a h:Sequence,
                h:SequenceTail .
      ( :symbol  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#symbol'>symbol</a>" .
      ( :universal  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#universal'>universal</a>" .
      ( :variable  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#variable'>variable</a>" .
      ( :verb 
        :object 
        :objecttail 
        :propertylisttail  )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( <#_g0>  )
         a h:SequenceTail .
      ( <#_g1>  )
         a h:SequenceTail .
      ( <#_g2>  )
         a h:SequenceTail .
      ( <#_g3>  )
         a h:SequenceTail .
      ( <#_g4>  )
         a h:SequenceTail .
      ( <#_g5>  )
         a h:SequenceTail .
    
    <n3.n3>     cfg:syntaxFor  [
             cfg:internetMediaType <http://www.w3.org/2003/mediatypes#application/n3> ] .
    
    cfg:eof     h:reference "<em>EOF</em>" .
    
    :barename     a h:Production;
         cfg:canStartWith "_",
                "a";
         cfg:label "barename";
         cfg:matches "[a-zA-Z_][a-zA-Z0-9_]*";
         h:reference "<a href='#barename'>barename</a>" .
    
    :declaration     a h:Production;
         cfg:canBeSequence  (
        "@keywords" 
        <#_g2>  ),
                 (
        "@prefix" 
        :prefix 
        :explicituri  );
         cfg:label "declaration";
         cfg:mustBeOneSequence  (
         (
            "@prefix" 
            :prefix 
            :explicituri  )
         (
            "@keywords" 
            <#_g2>  ) );
         h:optionTail (),
                 (
         (
            "@keywords" 
            <#_g2>  ) ),
                 (
         (
            "@prefix" 
            :prefix 
            :explicituri  )
         (
            "@keywords" 
            <#_g2>  ) );
         h:reference "<a href='#declaration'>declaration</a>" .
    
    :document     a rul:Used,
                h:Production;
         cfg:canBeSequence  (
        :statements_optional 
        cfg:eof  );
         cfg:label "document";
         cfg:mustBeOneSequence  (
         (
            :statements_optional 
            cfg:eof  ) );
         h:optionTail (),
                 (
         (
            :statements_optional 
            cfg:eof  ) );
         h:reference "<a href='#document'>document</a>" .
    
    :dtlang     a h:Production;
         cfg:canBeSequence (),
                 (
        "@" 
        :langcode  ),
                 (
        "^^" 
        :symbol  );
         cfg:label "dtlang";
         cfg:mustBeOneSequence  (
        () 
         (
            "@" 
            :langcode  )
         (
            "^^" 
            :symbol  ) );
         h:optionTail (),
                 (
        () 
         (
            "@" 
            :langcode  )
         (
            "^^" 
            :symbol  ) ),
                 (
         (
            "@" 
            :langcode  )
         (
            "^^" 
            :symbol  ) ),
                 (
         (
            "^^" 
            :symbol  ) );
         h:reference "<a href='#dtlang'>dtlang</a>" .
    
    :existential     a h:Production;
         cfg:canBeSequence  (
        "@forSome" 
        <#_g1>  );
         cfg:label "existential";
         cfg:mustBeOneSequence  (
         (
            "@forSome" 
            <#_g1>  ) );
         h:optionTail (),
                 (
         (
            "@forSome" 
            <#_g1>  ) );
         h:reference "<a href='#existential'>existential</a>" .
    
    :explicituri     a h:Production;
         cfg:canStartWith "<";
         cfg:label "explicituri";
         cfg:matches "<[^>]*>";
         h:reference "<a href='#explicituri'>explicituri</a>" .
    
    :formulacontent     a h:Production;
         cfg:canBeSequence (),
                 (
        :statementlist  );
         cfg:label "formulacontent";
         cfg:mustBeOneSequence  (
        () 
         (
            :statementlist  ) );
         h:optionTail (),
                 (
        () 
         (
            :statementlist  ) ),
                 (
         (
            :statementlist  ) );
         h:reference "<a href='#formulacontent'>formulacontent</a>" .
    
    :langcode     a h:Production;
         cfg:canStartWith "a";
         cfg:label "langcode";
         cfg:matches "[a-z]+(-[a-z0-9]+)*";
         h:reference "<a href='#langcode'>langcode</a>" .
    
    :language     a cfg:Language;
         cfg:document :document;
         cfg:whiteSpace "@@@@@" .
    
    :literal     a h:Production;
         cfg:canBeSequence  (
        :string 
        :dtlang  );
         cfg:label "literal";
         cfg:mustBeOneSequence  (
         (
            :string 
            :dtlang  ) );
         h:optionTail (),
                 (
         (
            :string 
            :dtlang  ) );
         h:reference "<a href='#literal'>literal</a>" .
    
    :node     a h:Production;
         cfg:canBeSequence  (
        "(" 
        :pathlist 
        ")"  ),
                 (
        "@this"  ),
                 (
        "[" 
        :propertylist 
        "]"  ),
                 (
        "{" 
        :formulacontent 
        "}"  ),
                 (
        :literal  ),
                 (
        :numericliteral  ),
                 (
        :symbol  ),
                 (
        :variable  );
         cfg:label "node";
         cfg:mustBeOneSequence  (
         (
            :symbol  )
         (
            "{" 
            :formulacontent 
            "}"  )
         (
            :variable  )
         (
            :numericliteral  )
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) );
         h:optionTail (),
                 (
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            "@this"  ) ),
                 (
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            "{" 
            :formulacontent 
            "}"  )
         (
            :variable  )
         (
            :numericliteral  )
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            :numericliteral  )
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            :symbol  )
         (
            "{" 
            :formulacontent 
            "}"  )
         (
            :variable  )
         (
            :numericliteral  )
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            :variable  )
         (
            :numericliteral  )
         (
            :literal  )
         (
            "[" 
            :propertylist 
            "]"  )
         (
            "(" 
            :pathlist 
            ")"  )
         (
            "@this"  ) );
         h:reference "<a href='#node'>node</a>" .
    
    :numericliteral     a h:Production;
         cfg:canStartWith "+",
                "-",
                "0";
         cfg:label "numericliteral";
         cfg:matches "[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?";
         h:reference "<a href='#numericliteral'>numericliteral</a>" .
    
    :object     a h:Production;
         cfg:canBeSequence  (
        :path  );
         cfg:label "object";
         cfg:mustBeOneSequence  (
         (
            :path  ) );
         h:optionTail (),
                 (
         (
            :path  ) );
         h:reference "<a href='#object'>object</a>" .
    
    :objecttail     a h:Production;
         cfg:canBeSequence (),
                 (
        "," 
        :object 
        :objecttail  );
         cfg:label "objecttail";
         cfg:mustBeOneSequence  (
        () 
         (
            "," 
            :object 
            :objecttail  ) );
         h:optionTail (),
                 (
        () 
         (
            "," 
            :object 
            :objecttail  ) ),
                 (
         (
            "," 
            :object 
            :objecttail  ) );
         h:reference "<a href='#objecttail'>objecttail</a>" .
    
    :path     a h:Production;
         cfg:canBeSequence  (
        :node 
        :pathtail  );
         cfg:label "path";
         cfg:mustBeOneSequence  (
         (
            :node 
            :pathtail  ) );
         h:optionTail (),
                 (
         (
            :node 
            :pathtail  ) );
         h:reference "<a href='#path'>path</a>" .
    
    :pathlist     a h:Production;
         cfg:canBeSequence (),
                 (
        :path 
        :pathlist  );
         cfg:label "pathlist";
         cfg:mustBeOneSequence  (
        () 
         (
            :path 
            :pathlist  ) );
         h:optionTail (),
                 (
        () 
         (
            :path 
            :pathlist  ) ),
                 (
         (
            :path 
            :pathlist  ) );
         h:reference "<a href='#pathlist'>pathlist</a>" .
    
    :pathtail     a h:Production;
         cfg:canBeSequence (),
                 (
        "!" 
        :path  ),
                 (
        "^" 
        :path  );
         cfg:label "pathtail";
         cfg:mustBeOneSequence  (
        () 
         (
            "!" 
            :path  )
         (
            "^" 
            :path  ) );
         h:optionTail (),
                 (
        () 
         (
            "!" 
            :path  )
         (
            "^" 
            :path  ) ),
                 (
         (
            "!" 
            :path  )
         (
            "^" 
            :path  ) ),
                 (
         (
            "^" 
            :path  ) );
         h:reference "<a href='#pathtail'>pathtail</a>" .
    
    :prefix     a h:Production;
         cfg:canStartWith ":",
                "_",
                "a";
         cfg:label "prefix";
         cfg:matches "([a-zA-Z_][a-zA-Z0-9_]*)?:";
         h:reference "<a href='#prefix'>prefix</a>" .
    
    :propertylist     a h:Production;
         cfg:canBeSequence (),
                 (
        :verb 
        :object 
        :objecttail 
        :propertylisttail  );
         cfg:label "propertylist";
         cfg:mustBeOneSequence  (
        () 
         (
            :verb 
            :object 
            :objecttail 
            :propertylisttail  ) );
         h:optionTail (),
                 (
        () 
         (
            :verb 
            :object 
            :objecttail 
            :propertylisttail  ) ),
                 (
         (
            :verb 
            :object 
            :objecttail 
            :propertylisttail  ) );
         h:reference "<a href='#propertylist'>propertylist</a>" .
    
    :propertylisttail     a h:Production;
         cfg:canBeSequence (),
                 (
        ";" 
        :propertylist  );
         cfg:label "propertylisttail";
         cfg:mustBeOneSequence  (
        () 
         (
            ";" 
            :propertylist  ) );
         h:optionTail (),
                 (
        () 
         (
            ";" 
            :propertylist  ) ),
                 (
         (
            ";" 
            :propertylist  ) );
         h:reference "<a href='#propertylisttail'>propertylisttail</a>" .
    
    :qname     a h:Production;
         cfg:canStartWith ":",
                "_",
                "a";
         cfg:label "qname";
         cfg:matches "(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?";
         h:reference "<a href='#qname'>qname</a>" .
    
    :simpleStatement     a h:Production;
         cfg:canBeSequence  (
        :subject 
        :propertylist  );
         cfg:label "simpleStatement";
         cfg:mustBeOneSequence  (
         (
            :subject 
            :propertylist  ) );
         h:optionTail (),
                 (
         (
            :subject 
            :propertylist  ) );
         h:reference "<a href='#simpleStatement'>simpleStatement</a>" .
    
    :statement     a h:Production;
         cfg:canBeSequence  (
        :declaration  ),
                 (
        :existential  ),
                 (
        :simpleStatement  ),
                 (
        :universal  );
         cfg:label "statement";
         cfg:mustBeOneSequence  (
         (
            :declaration  )
         (
            :universal  )
         (
            :existential  )
         (
            :simpleStatement  ) );
         h:optionTail (),
                 (
         (
            :declaration  )
         (
            :universal  )
         (
            :existential  )
         (
            :simpleStatement  ) ),
                 (
         (
            :existential  )
         (
            :simpleStatement  ) ),
                 (
         (
            :simpleStatement  ) ),
                 (
         (
            :universal  )
         (
            :existential  )
         (
            :simpleStatement  ) );
         h:reference "<a href='#statement'>statement</a>" .
    
    :statementlist     a h:Production;
         cfg:canBeSequence (),
                 (
        :statement 
        :statementtail  );
         cfg:label "statementlist";
         cfg:mustBeOneSequence  (
        () 
         (
            :statement 
            :statementtail  ) );
         h:optionTail (),
                 (
        () 
         (
            :statement 
            :statementtail  ) ),
                 (
         (
            :statement 
            :statementtail  ) );
         h:reference "<a href='#statementlist'>statementlist</a>" .
    
    :statements_optional     a h:Production;
         cfg:canBeSequence (),
                 (
        :statement 
        "." 
        :statements_optional  );
         cfg:label "statements_optional";
         cfg:mustBeOneSequence  (
        () 
         (
            :statement 
            "." 
            :statements_optional  ) );
         h:optionTail (),
                 (
        () 
         (
            :statement 
            "." 
            :statements_optional  ) ),
                 (
         (
            :statement 
            "." 
            :statements_optional  ) );
         h:reference "<a href='#statements_optional'>statements_optional</a>" .
    
    :statementtail     a h:Production;
         cfg:canBeSequence (),
                 (
        "." 
        :statementlist  );
         cfg:label "statementtail";
         cfg:mustBeOneSequence  (
        () 
         (
            "." 
            :statementlist  ) );
         h:optionTail (),
                 (
        () 
         (
            "." 
            :statementlist  ) ),
                 (
         (
            "." 
            :statementlist  ) );
         h:reference "<a href='#statementtail'>statementtail</a>" .
    
    :string     a h:Production;
         cfg:canStartWith "\"";
         cfg:label "string";
         cfg:matches """(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")""";
         h:reference "<a href='#string'>string</a>" .
    
    :subject     a h:Production;
         cfg:canBeSequence  (
        :path  );
         cfg:label "subject";
         cfg:mustBeOneSequence  (
         (
            :path  ) );
         h:optionTail (),
                 (
         (
            :path  ) );
         h:reference "<a href='#subject'>subject</a>" .
    
    :symbol     a h:Production;
         cfg:canBeSequence  (
        :explicituri  ),
                 (
        :qname  );
         cfg:label "symbol";
         cfg:mustBeOneSequence  (
         (
            :explicituri  )
         (
            :qname  ) );
         h:optionTail (),
                 (
         (
            :explicituri  )
         (
            :qname  ) ),
                 (
         (
            :qname  ) );
         h:reference "<a href='#symbol'>symbol</a>" .
    
    :universal     a h:Production;
         cfg:canBeSequence  (
        "@forAll" 
        <#_g0>  );
         cfg:label "universal";
         cfg:mustBeOneSequence  (
         (
            "@forAll" 
            <#_g0>  ) );
         h:optionTail (),
                 (
         (
            "@forAll" 
            <#_g0>  ) );
         h:reference "<a href='#universal'>universal</a>" .
    
    :variable     a h:Production;
         cfg:canStartWith "?";
         cfg:label "variable";
         cfg:matches "\\?[a-zA-Z_][a-zA-Z0-9_]*";
         h:reference "<a href='#variable'>variable</a>" .
    
    :verb     a h:Production;
         cfg:canBeSequence  (
        "<="  ),
                 (
        "="  ),
                 (
        "=>"  ),
                 (
        "@a"  ),
                 (
        "@has" 
        :path  ),
                 (
        "@is" 
        :path 
        "@of"  ),
                 (
        :path  );
         cfg:label "verb";
         cfg:mustBeOneSequence  (
         (
            :path  )
         (
            "@has" 
            :path  )
         (
            "@is" 
            :path 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) );
         h:optionTail (),
                 (
         (
            "<="  ) ),
                 (
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@has" 
            :path  )
         (
            "@is" 
            :path 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@is" 
            :path 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            :path  )
         (
            "@has" 
            :path  )
         (
            "@is" 
            :path 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) );
         h:reference "<a href='#verb'>verb</a>" .
    
    <#_g0>     a h:Production;
         cfg:canBeSequence (),
                 (
        :symbol 
        <#_g3>  );
         cfg:commaSeparatedListOf :symbol;
         cfg:mustBeOneSequence  (
        () 
         (
            :symbol 
            <#_g3>  ) );
         h:optionTail (),
                 (
        () 
         (
            :symbol 
            <#_g3>  ) ),
                 (
         (
            :symbol 
            <#_g3>  ) ) .
    
    <#_g1>     a h:Production;
         cfg:canBeSequence (),
                 (
        :symbol 
        <#_g4>  );
         cfg:commaSeparatedListOf :symbol;
         cfg:mustBeOneSequence  (
        () 
         (
            :symbol 
            <#_g4>  ) );
         h:optionTail (),
                 (
        () 
         (
            :symbol 
            <#_g4>  ) ),
                 (
         (
            :symbol 
            <#_g4>  ) ) .
    
    <#_g2>     a h:Production;
         cfg:canBeSequence (),
                 (
        :barename 
        <#_g5>  );
         cfg:commaSeparatedListOf :barename;
         cfg:mustBeOneSequence  (
        () 
         (
            :barename 
            <#_g5>  ) );
         h:optionTail (),
                 (
        () 
         (
            :barename 
            <#_g5>  ) ),
                 (
         (
            :barename 
            <#_g5>  ) ) .
    
    <#_g3>     a h:Production;
         cfg:CSLTail2 :symbol;
         cfg:canBeSequence (),
                 (
        "," 
        :symbol 
        <#_g3>  );
         cfg:mustBeOneSequence  (
        () 
         (
            "," 
            :symbol 
            <#_g3>  ) );
         h:optionTail (),
                 (
        () 
         (
            "," 
            :symbol 
            <#_g3>  ) ),
                 (
         (
            "," 
            :symbol 
            <#_g3>  ) ) .
    
    <#_g4>     a h:Production;
         cfg:CSLTail2 :symbol;
         cfg:canBeSequence (),
                 (
        "," 
        :symbol 
        <#_g4>  );
         cfg:mustBeOneSequence  (
        () 
         (
            "," 
            :symbol 
            <#_g4>  ) );
         h:optionTail (),
                 (
        () 
         (
            "," 
            :symbol 
            <#_g4>  ) ),
                 (
         (
            "," 
            :symbol 
            <#_g4>  ) ) .
    
    <#_g5>     a h:Production;
         cfg:CSLTail2 :barename;
         cfg:canBeSequence (),
                 (
        "," 
        :barename 
        <#_g5>  );
         cfg:mustBeOneSequence  (
        () 
         (
            "," 
            :barename 
            <#_g5>  ) );
         h:optionTail (),
                 (
        () 
         (
            "," 
            :barename 
            <#_g5>  ) ),
                 (
         (
            "," 
            :barename 
            <#_g5>  ) ) .
    
#ENDS
