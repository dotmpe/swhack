#Processed by Id: cwm.py,v 1.155 2004/06/30 20:04:57 timbl Exp 
        #    using base file:/devel/WWW/2000/10/swap/grammar/
        
#  Notation3 generation by
#       notation3.py,v 1.156 2004/06/30 18:06:19 syosi Exp

#   Base was: file:/devel/WWW/2000/10/swap/grammar/
     @prefix : <http://www.w3.org/2000/10/swap/grammar/bnf2html#> .
     @prefix bnf: <http://www.w3.org/2000/10/swap/grammar/bnf#> .
     @prefix log: <http://www.w3.org/2000/10/swap/log#> .
     @prefix n3: <http://www.w3.org/2000/10/swap/grammar/n3#> .
     @prefix rul: <http://www.w3.org/2000/10/swap/grammar/bnf-rules#> .
    
     @forSome <#_g0>,
                <#_g1>,
                <#_g2>,
                <#_g3>,
                <#_g4>,
                <#_g5>,
                <#_g6>,
                <#_g7>,
                <#_g8>,
                <#_g9>,
                <#_g10>,
                <#_g11> .
    
    "!"     :reference """<b><code>"!"</code></b>""" .
    
    "("     :reference """<b><code>"("</code></b>""" .
    
    ")"     :reference """<b><code>")"</code></b>""" .
    
    ","     :reference """<b><code>","</code></b>""" .
    
    "."     :reference """<b><code>"."</code></b>""" .
    
    ";"     :reference """<b><code>";"</code></b>""" .
    
    "<="     :reference """<b><code>"<="</code></b>""" .
    
    "="     :reference """<b><code>"="</code></b>""" .
    
    "=>"     :reference """<b><code>"=>"</code></b>""" .
    
    "@"     :reference """<b><code>"@"</code></b>""" .
    
    "@a"     :reference """<b><code>"@a"</code></b>""" .
    
    "@forAll"     :reference """<b><code>"@forAll"</code></b>""" .
    
    "@forSome"     :reference """<b><code>"@forSome"</code></b>""" .
    
    "@has"     :reference """<b><code>"@has"</code></b>""" .
    
    "@is"     :reference """<b><code>"@is"</code></b>""" .
    
    "@keywords"     :reference """<b><code>"@keywords"</code></b>""" .
    
    "@of"     :reference """<b><code>"@of"</code></b>""" .
    
    "@prefix"     :reference """<b><code>"@prefix"</code></b>""" .
    
    "@this"     :reference """<b><code>"@this"</code></b>""" .
    
    "["     :reference """<b><code>"["</code></b>""" .
    
    "]"     :reference """<b><code>"]"</code></b>""" .
    
    "^"     :reference """<b><code>"^"</code></b>""" .
    
    "^^"     :reference """<b><code>"^^"</code></b>""" .
    
    "{"     :reference """<b><code>"{"</code></b>""" .
    
    "}"     :reference """<b><code>"}"</code></b>""" .
    
    1     :reference """<b><code>"1"</code></b>""" .
    
    ()     a :Sequence,
                :SequenceTail;
         :seqlabel "<em>void</em>" .
      ( "!" 
        n3:path  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"!"</code></b> <a href='#path'>path</a>""" .
      ( "(" 
        n3:pathlist 
        ")"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( ")"  )
         a :SequenceTail;
         :seqlabel """<b><code>")"</code></b>""" .
      ( "," 
        n3:barename 
        <#_g11>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_necsl'>barename_necsl</a>""" .
      ( "," 
        n3:object 
        n3:objecttail  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a>""" .
      ( "," 
        n3:symbol 
        <#_g9>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a>""" .
      ( "," 
        n3:symbol 
        <#_g10>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a>""" .
      ( "." 
        n3:statementlist  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"."</code></b> <a href='#statementlist'>statementlist</a>""" .
      ( "." 
        n3:statements_optional  )
         a :SequenceTail;
         :seqlabel """<b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( "."  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"."</code></b>""" .
      ( "0" 
        0  )
         log:outputString """<html>
<head>
   <title>BNF</title>
</head>
<body>
  <h1>BNF</h1>
  <p>Productions are in normal type, linked to their definitions.<br />
    <em>Regular expressions are in italics</em><br />
    <b><code>Literal characters in quoted in bold</code></b><br />
    <em>void</em> means an empty production.
  </p>
  <dl>
""" .
      ( ";" 
        n3:verb 
        n3:object 
        n3:objecttail 
        n3:propertylisttail  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>";"</code></b> <a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>""" .
      ( "<="  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"<="</code></b>""" .
      ( "="  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"="</code></b>""" .
      ( "=>"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"=>"</code></b>""" .
      ( "@" 
        1  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@"</code></b> <b><code>"1"</code></b>""" .
      ( "@a"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@a"</code></b>""" .
      ( "@forAll" 
        <#_g6>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@forSome" 
        <#_g7>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@has" 
        n3:prop  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@has"</code></b> <a href='#prop'>prop</a>""" .
      ( "@is" 
        n3:prop 
        "@of"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@is"</code></b> <a href='#prop'>prop</a> <b><code>"@of"</code></b>""" .
      ( "@keywords" 
        <#_g8>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a>""" .
      ( "@of"  )
         a :SequenceTail;
         :seqlabel """<b><code>"@of"</code></b>""" .
      ( "@prefix" 
        n3:qname 
        n3:explicituri 
        "."  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@prefix"</code></b> <a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( "@this"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@this"</code></b>""" .
      ( "[" 
        n3:propertylist 
        "]"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( "]"  )
         a :SequenceTail;
         :seqlabel """<b><code>"]"</code></b>""" .
      ( "^" 
        n3:path  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"^"</code></b> <a href='#path'>path</a>""" .
      ( "^^" 
        n3:symbol  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"^^"</code></b> <a href='#symbol'>symbol</a>""" .
      ( "barename" 
        0  )
         log:outputString """  <dt><a name='barename'>barename</a></dt><dd>
""" .
      ( "barename" 
        6  )
         log:outputString """	<p><em>[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "barename" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "barename_csl" 
        0  )
         log:outputString """  <dt><a name='barename_csl'>barename_csl</a></dt><dd>
""" .
      ( "barename_csl" 
        5  )
         log:outputString """		<p><a href='#barename'>barename</a> <a href='#barename_necsl'>barename_necsl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "barename_csl" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "barename_necsl" 
        0  )
         log:outputString """  <dt><a name='barename_necsl'>barename_necsl</a></dt><dd>
""" .
      ( "barename_necsl" 
        5  )
         log:outputString """		<p><b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_necsl'>barename_necsl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "barename_necsl" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "declaration" 
        0  )
         log:outputString """  <dt><a name='declaration'>declaration</a></dt><dd>
""" .
      ( "declaration" 
        5  )
         log:outputString """		<p><b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a></p>
""",
                """		<p><b><code>"@prefix"</code></b> <a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b></p>
""" .
      ( "declaration" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "declaration_s" 
        0  )
         log:outputString """  <dt><a name='declaration_s'>declaration_s</a></dt><dd>
""" .
      ( "declaration_s" 
        5  )
         log:outputString """		<p><a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "declaration_s" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "document" 
        0  )
         log:outputString """  <dt><a name='document'>document</a></dt><dd>
""" .
      ( "document" 
        5  )
         log:outputString """		<p><a href='#declaration_s'>declaration_s</a> <a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em></p>
""" .
      ( "document" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "dtlang" 
        0  )
         log:outputString """  <dt><a name='dtlang'>dtlang</a></dt><dd>
""" .
      ( "dtlang" 
        5  )
         log:outputString """		<p><b><code>"@"</code></b> <b><code>"1"</code></b></p>
""",
                """		<p><b><code>"^^"</code></b> <a href='#symbol'>symbol</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "dtlang" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "existential" 
        0  )
         log:outputString """  <dt><a name='existential'>existential</a></dt><dd>
""" .
      ( "existential" 
        5  )
         log:outputString """		<p><b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "existential" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "existential_s" 
        0  )
         log:outputString """  <dt><a name='existential_s'>existential_s</a></dt><dd>
""" .
      ( "existential_s" 
        5  )
         log:outputString """		<p><a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "existential_s" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "explicituri" 
        0  )
         log:outputString """  <dt><a name='explicituri'>explicituri</a></dt><dd>
""" .
      ( "explicituri" 
        6  )
         log:outputString """	<p><em><[^>]*></em></p>
""" .
      ( "explicituri" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "formulacontent" 
        0  )
         log:outputString """  <dt><a name='formulacontent'>formulacontent</a></dt><dd>
""" .
      ( "formulacontent" 
        5  )
         log:outputString """		<p><a href='#declaration_s'>declaration_s</a> <a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a></p>
""" .
      ( "formulacontent" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "langcode" 
        0  )
         log:outputString """  <dt><a name='langcode'>langcode</a></dt><dd>
""" .
      ( "langcode" 
        6  )
         log:outputString """	<p><em>[a-z]+(-[a-z0-9]+)*</em></p>
""" .
      ( "langcode" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "literal" 
        0  )
         log:outputString """  <dt><a name='literal'>literal</a></dt><dd>
""" .
      ( "literal" 
        5  )
         log:outputString """		<p><a href='#string'>string</a> <a href='#dtlang'>dtlang</a></p>
""" .
      ( "literal" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "node" 
        0  )
         log:outputString """  <dt><a name='node'>node</a></dt><dd>
""" .
      ( "node" 
        5  )
         log:outputString """		<p><a href='#literal'>literal</a></p>
""",
                """		<p><a href='#numericliteral'>numericliteral</a></p>
""",
                """		<p><a href='#symbol'>symbol</a></p>
""",
                """		<p><a href='#variable'>variable</a></p>
""",
                """		<p><b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b></p>
""",
                """		<p><b><code>"@this"</code></b></p>
""",
                """		<p><b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b></p>
""",
                """		<p><b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b></p>
""" .
      ( "node" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "numericliteral" 
        0  )
         log:outputString """  <dt><a name='numericliteral'>numericliteral</a></dt><dd>
""" .
      ( "numericliteral" 
        6  )
         log:outputString """	<p><em>[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?</em></p>
""" .
      ( "numericliteral" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "object" 
        0  )
         log:outputString """  <dt><a name='object'>object</a></dt><dd>
""" .
      ( "object" 
        5  )
         log:outputString """		<p><a href='#path'>path</a></p>
""" .
      ( "object" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "objecttail" 
        0  )
         log:outputString """  <dt><a name='objecttail'>objecttail</a></dt><dd>
""" .
      ( "objecttail" 
        5  )
         log:outputString """		<p><b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "objecttail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "path" 
        0  )
         log:outputString """  <dt><a name='path'>path</a></dt><dd>
""" .
      ( "path" 
        5  )
         log:outputString """		<p><a href='#node'>node</a> <a href='#pathtail'>pathtail</a></p>
""" .
      ( "path" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "pathlist" 
        0  )
         log:outputString """  <dt><a name='pathlist'>pathlist</a></dt><dd>
""" .
      ( "pathlist" 
        5  )
         log:outputString """		<p><a href='#path'>path</a> <a href='#pathlist'>pathlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathlist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "pathtail" 
        0  )
         log:outputString """  <dt><a name='pathtail'>pathtail</a></dt><dd>
""" .
      ( "pathtail" 
        5  )
         log:outputString """		<p><b><code>"!"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><b><code>"^"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathtail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "prop" 
        0  )
         log:outputString """  <dt><a name='prop'>prop</a></dt><dd>
""" .
      ( "prop" 
        5  )
         log:outputString """		<p><a href='#node'>node</a></p>
""" .
      ( "prop" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "propertylist" 
        0  )
         log:outputString """  <dt><a name='propertylist'>propertylist</a></dt><dd>
""" .
      ( "propertylist" 
        5  )
         log:outputString """		<p><a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "propertylisttail" 
        0  )
         log:outputString """  <dt><a name='propertylisttail'>propertylisttail</a></dt><dd>
""" .
      ( "propertylisttail" 
        5  )
         log:outputString """		<p><b><code>";"</code></b> <a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylisttail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "qname" 
        0  )
         log:outputString """  <dt><a name='qname'>qname</a></dt><dd>
""" .
      ( "qname" 
        6  )
         log:outputString """	<p><em>(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?</em></p>
""" .
      ( "qname" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statement" 
        0  )
         log:outputString """  <dt><a name='statement'>statement</a></dt><dd>
""" .
      ( "statement" 
        5  )
         log:outputString """		<p><a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a></p>
""" .
      ( "statement" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statementlist" 
        0  )
         log:outputString """  <dt><a name='statementlist'>statementlist</a></dt><dd>
""" .
      ( "statementlist" 
        5  )
         log:outputString """		<p><a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementlist" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statements_optional" 
        0  )
         log:outputString """  <dt><a name='statements_optional'>statements_optional</a></dt><dd>
""" .
      ( "statements_optional" 
        5  )
         log:outputString """		<p><a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statements_optional" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "statementtail" 
        0  )
         log:outputString """  <dt><a name='statementtail'>statementtail</a></dt><dd>
""" .
      ( "statementtail" 
        5  )
         log:outputString """		<p><b><code>"."</code></b> <a href='#statementlist'>statementlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementtail" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "string" 
        0  )
         log:outputString """  <dt><a name='string'>string</a></dt><dd>
""" .
      ( "string" 
        6  )
         log:outputString """	<p><em>(\""".*\""")|("([^"]|(\\\\["\\\\a-z]))*")</em></p>
""" .
      ( "string" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "subject" 
        0  )
         log:outputString """  <dt><a name='subject'>subject</a></dt><dd>
""" .
      ( "subject" 
        5  )
         log:outputString """		<p><a href='#path'>path</a></p>
""" .
      ( "subject" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "symbol" 
        0  )
         log:outputString """  <dt><a name='symbol'>symbol</a></dt><dd>
""" .
      ( "symbol" 
        5  )
         log:outputString """		<p><a href='#explicituri'>explicituri</a></p>
""",
                """		<p><a href='#qname'>qname</a></p>
""" .
      ( "symbol" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "symbol_csl" 
        0  )
         log:outputString """  <dt><a name='symbol_csl'>symbol_csl</a></dt><dd>
""" .
      ( "symbol_csl" 
        5  )
         log:outputString """		<p><a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "symbol_csl" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "symbol_necsl" 
        0  )
         log:outputString """  <dt><a name='symbol_necsl'>symbol_necsl</a></dt><dd>
""" .
      ( "symbol_necsl" 
        5  )
         log:outputString """		<p><b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "symbol_necsl" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "universal" 
        0  )
         log:outputString """  <dt><a name='universal'>universal</a></dt><dd>
""" .
      ( "universal" 
        5  )
         log:outputString """		<p><b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "universal" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "universal_s" 
        0  )
         log:outputString """  <dt><a name='universal_s'>universal_s</a></dt><dd>
""" .
      ( "universal_s" 
        5  )
         log:outputString """		<p><a href='#universal'>universal</a> <a href='#universal_s'>universal_s</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "universal_s" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "variable" 
        0  )
         log:outputString """  <dt><a name='variable'>variable</a></dt><dd>
""" .
      ( "variable" 
        6  )
         log:outputString """	<p><em>\\?[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "variable" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "verb" 
        0  )
         log:outputString """  <dt><a name='verb'>verb</a></dt><dd>
""" .
      ( "verb" 
        5  )
         log:outputString """		<p><a href='#prop'>prop</a></p>
""",
                """		<p><b><code>"<="</code></b></p>
""",
                """		<p><b><code>"="</code></b></p>
""",
                """		<p><b><code>"=>"</code></b></p>
""",
                """		<p><b><code>"@a"</code></b></p>
""",
                """		<p><b><code>"@has"</code></b> <a href='#prop'>prop</a></p>
""",
                """		<p><b><code>"@is"</code></b> <a href='#prop'>prop</a> <b><code>"@of"</code></b></p>
""" .
      ( "verb" 
        9  )
         log:outputString "\t</dd>\n" .
      ( "{" 
        n3:formulacontent 
        "}"  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "}"  )
         a :SequenceTail;
         :seqlabel """<b><code>"}"</code></b>""" .
      ( "~~" 
        9  )
         log:outputString "\n</dl>\n</html>\n" .
      ( 1  )
         a :SequenceTail;
         :seqlabel """<b><code>"1"</code></b>""" .
      ( bnf:eof  )
         a :SequenceTail;
         :seqlabel "<em>EOF</em>" .
      ( n3:barename 
        <#_g11>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#barename'>barename</a> <a href='#barename_necsl'>barename_necsl</a>" .
      ( n3:declaration 
        <#_g0>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a>" .
      ( n3:declaration 
        <#_g3>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a>" .
      ( n3:dtlang  )
         a :SequenceTail;
         :seqlabel "<a href='#dtlang'>dtlang</a>" .
      ( n3:existential 
        <#_g2>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a>" .
      ( n3:existential 
        <#_g5>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a>" .
      ( n3:explicituri 
        "."  )
         a :SequenceTail;
         :seqlabel """<a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( n3:explicituri  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#explicituri'>explicituri</a>" .
      ( n3:formulacontent 
        "}"  )
         a :SequenceTail;
         :seqlabel """<a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( n3:literal  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#literal'>literal</a>" .
      ( n3:node 
        n3:pathtail  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#node'>node</a> <a href='#pathtail'>pathtail</a>" .
      ( n3:node  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#node'>node</a>" .
      ( n3:numericliteral  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#numericliteral'>numericliteral</a>" .
      ( n3:object 
        n3:objecttail 
        n3:propertylisttail  )
         a :SequenceTail;
         :seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( n3:object 
        n3:objecttail  )
         a :SequenceTail;
         :seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a>" .
      ( n3:objecttail 
        n3:propertylisttail  )
         a :SequenceTail;
         :seqlabel "<a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( n3:objecttail  )
         a :SequenceTail;
         :seqlabel "<a href='#objecttail'>objecttail</a>" .
      ( n3:path 
        n3:pathlist  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#path'>path</a> <a href='#pathlist'>pathlist</a>" .
      ( n3:path  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#path'>path</a>" .
      ( n3:pathlist 
        ")"  )
         a :SequenceTail;
         :seqlabel """<a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( n3:pathlist  )
         a :SequenceTail;
         :seqlabel "<a href='#pathlist'>pathlist</a>" .
      ( n3:pathtail  )
         a :SequenceTail;
         :seqlabel "<a href='#pathtail'>pathtail</a>" .
      ( n3:prop 
        "@of"  )
         a :SequenceTail;
         :seqlabel """<a href='#prop'>prop</a> <b><code>"@of"</code></b>""" .
      ( n3:prop  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#prop'>prop</a>" .
      ( n3:propertylist 
        "]"  )
         a :SequenceTail;
         :seqlabel """<a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( n3:propertylist  )
         a :SequenceTail;
         :seqlabel "<a href='#propertylist'>propertylist</a>" .
      ( n3:propertylisttail  )
         a :SequenceTail;
         :seqlabel "<a href='#propertylisttail'>propertylisttail</a>" .
      ( n3:qname 
        n3:explicituri 
        "."  )
         a :SequenceTail;
         :seqlabel """<a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( n3:qname  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#qname'>qname</a>" .
      ( n3:statement 
        "." 
        n3:statements_optional  )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( n3:statement 
        n3:statementtail  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a>" .
      ( n3:statementlist  )
         a :SequenceTail;
         :seqlabel "<a href='#statementlist'>statementlist</a>" .
      ( n3:statements_optional 
        bnf:eof  )
         a :SequenceTail;
         :seqlabel "<a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( n3:statements_optional  )
         a :SequenceTail;
         :seqlabel "<a href='#statements_optional'>statements_optional</a>" .
      ( n3:statementtail  )
         a :SequenceTail;
         :seqlabel "<a href='#statementtail'>statementtail</a>" .
      ( n3:string 
        n3:dtlang  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#string'>string</a> <a href='#dtlang'>dtlang</a>" .
      ( n3:subject 
        n3:propertylist  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a>" .
      ( n3:symbol 
        <#_g9>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a>" .
      ( n3:symbol 
        <#_g10>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_necsl'>symbol_necsl</a>" .
      ( n3:symbol  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a>" .
      ( n3:universal 
        <#_g1>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#universal'>universal</a> <a href='#universal_s'>universal_s</a>" .
      ( n3:universal 
        <#_g4>  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#universal'>universal</a> <a href='#universal_s'>universal_s</a>" .
      ( n3:variable  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#variable'>variable</a>" .
      ( n3:verb 
        n3:object 
        n3:objecttail 
        n3:propertylisttail  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( <#_g0> 
        <#_g1> 
        <#_g2> 
        n3:statements_optional 
        bnf:eof  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a> <a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( <#_g0>  )
         a :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a>" .
      ( <#_g1> 
        <#_g2> 
        n3:statements_optional 
        bnf:eof  )
         a :SequenceTail;
         :seqlabel "<a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( <#_g1>  )
         a :SequenceTail;
         :seqlabel "<a href='#universal_s'>universal_s</a>" .
      ( <#_g2> 
        n3:statements_optional 
        bnf:eof  )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( <#_g2>  )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a>" .
      ( <#_g3> 
        <#_g4> 
        <#_g5> 
        n3:statementlist  )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a> <a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a>" .
      ( <#_g3>  )
         a :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a>" .
      ( <#_g4> 
        <#_g5> 
        n3:statementlist  )
         a :SequenceTail;
         :seqlabel "<a href='#universal_s'>universal_s</a> <a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a>" .
      ( <#_g4>  )
         a :SequenceTail;
         :seqlabel "<a href='#universal_s'>universal_s</a>" .
      ( <#_g5> 
        n3:statementlist  )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a>" .
      ( <#_g5>  )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a>" .
      ( <#_g6>  )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g7>  )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g8>  )
         a :SequenceTail;
         :seqlabel "<a href='#barename_csl'>barename_csl</a>" .
      ( <#_g9>  )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_necsl'>symbol_necsl</a>" .
      ( <#_g10>  )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_necsl'>symbol_necsl</a>" .
      ( <#_g11>  )
         a :SequenceTail;
         :seqlabel "<a href='#barename_necsl'>barename_necsl</a>" .
    
    <n3.n3>     bnf:syntaxFor  [
             bnf:internetMediaType <http://www.w3.org/2003/mediatypes#application/n3> ] .
    
    bnf:eof     :reference "<em>EOF</em>" .
    
    n3:barename     a :Production;
         bnf:canStartWith "_",
                "a";
         bnf:label "barename";
         bnf:matches "[a-zA-Z_][a-zA-Z0-9_]*";
         :reference "<a href='#barename'>barename</a>" .
    
    n3:declaration     a :Production;
         bnf:canBeSequence  (
        "@keywords" 
        <#_g8>  ),
                 (
        "@prefix" 
        n3:qname 
        n3:explicituri 
        "."  );
         bnf:label "declaration";
         bnf:mustBeOneSequence  (
         (
            "@prefix" 
            n3:qname 
            n3:explicituri 
            "."  )
         (
            "@keywords" 
            <#_g8>  ) );
         :optionTail (),
                 (
         (
            "@keywords" 
            <#_g8>  ) ),
                 (
         (
            "@prefix" 
            n3:qname 
            n3:explicituri 
            "."  )
         (
            "@keywords" 
            <#_g8>  ) );
         :reference "<a href='#declaration'>declaration</a>" .
    
    n3:document     a rul:Used,
                :Production;
         bnf:canBeSequence  (
        <#_g0> 
        <#_g1> 
        <#_g2> 
        n3:statements_optional 
        bnf:eof  );
         bnf:label "document";
         bnf:mustBeOneSequence  (
         (
            <#_g0> 
            <#_g1> 
            <#_g2> 
            n3:statements_optional 
            bnf:eof  ) );
         :optionTail (),
                 (
         (
            <#_g0> 
            <#_g1> 
            <#_g2> 
            n3:statements_optional 
            bnf:eof  ) );
         :reference "<a href='#document'>document</a>" .
    
    n3:dtlang     a :Production;
         bnf:canBeSequence (),
                 (
        "@" 
        1  ),
                 (
        "^^" 
        n3:symbol  );
         bnf:label "dtlang";
         bnf:mustBeOneSequence  (
        () 
         (
            "@" 
            1  )
         (
            "^^" 
            n3:symbol  ) );
         :optionTail (),
                 (
        () 
         (
            "@" 
            1  )
         (
            "^^" 
            n3:symbol  ) ),
                 (
         (
            "@" 
            1  )
         (
            "^^" 
            n3:symbol  ) ),
                 (
         (
            "^^" 
            n3:symbol  ) );
         :reference "<a href='#dtlang'>dtlang</a>" .
    
    n3:existential     a :Production;
         bnf:canBeSequence  (
        "@forSome" 
        <#_g7>  );
         bnf:label "existential";
         bnf:mustBeOneSequence  (
         (
            "@forSome" 
            <#_g7>  ) );
         :optionTail (),
                 (
         (
            "@forSome" 
            <#_g7>  ) );
         :reference "<a href='#existential'>existential</a>" .
    
    n3:explicituri     a :Production;
         bnf:canStartWith "<";
         bnf:label "explicituri";
         bnf:matches "<[^>]*>";
         :reference "<a href='#explicituri'>explicituri</a>" .
    
    n3:formulacontent     a :Production;
         bnf:canBeSequence  (
        <#_g3> 
        <#_g4> 
        <#_g5> 
        n3:statementlist  );
         bnf:label "formulacontent";
         bnf:mustBeOneSequence  (
         (
            <#_g3> 
            <#_g4> 
            <#_g5> 
            n3:statementlist  ) );
         :optionTail (),
                 (
         (
            <#_g3> 
            <#_g4> 
            <#_g5> 
            n3:statementlist  ) );
         :reference "<a href='#formulacontent'>formulacontent</a>" .
    
    n3:langcode     a :Production;
         bnf:canStartWith "a";
         bnf:label "langcode";
         bnf:matches "[a-z]+(-[a-z0-9]+)*";
         :reference "<a href='#langcode'>langcode</a>" .
    
    n3:literal     a :Production;
         bnf:canBeSequence  (
        n3:string 
        n3:dtlang  );
         bnf:label "literal";
         bnf:mustBeOneSequence  (
         (
            n3:string 
            n3:dtlang  ) );
         :optionTail (),
                 (
         (
            n3:string 
            n3:dtlang  ) );
         :reference "<a href='#literal'>literal</a>" .
    
    n3:node     a :Production;
         bnf:canBeSequence  (
        "(" 
        n3:pathlist 
        ")"  ),
                 (
        "@this"  ),
                 (
        "[" 
        n3:propertylist 
        "]"  ),
                 (
        "{" 
        n3:formulacontent 
        "}"  ),
                 (
        n3:literal  ),
                 (
        n3:numericliteral  ),
                 (
        n3:symbol  ),
                 (
        n3:variable  );
         bnf:label "node";
         bnf:mustBeOneSequence  (
         (
            n3:symbol  )
         (
            "{" 
            n3:formulacontent 
            "}"  )
         (
            n3:variable  )
         (
            n3:numericliteral  )
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) );
         :optionTail (),
                 (
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            "@this"  ) ),
                 (
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            "{" 
            n3:formulacontent 
            "}"  )
         (
            n3:variable  )
         (
            n3:numericliteral  )
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            n3:numericliteral  )
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            n3:symbol  )
         (
            "{" 
            n3:formulacontent 
            "}"  )
         (
            n3:variable  )
         (
            n3:numericliteral  )
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) ),
                 (
         (
            n3:variable  )
         (
            n3:numericliteral  )
         (
            n3:literal  )
         (
            "[" 
            n3:propertylist 
            "]"  )
         (
            "(" 
            n3:pathlist 
            ")"  )
         (
            "@this"  ) );
         :reference "<a href='#node'>node</a>" .
    
    n3:numericliteral     a :Production;
         bnf:canStartWith "+",
                "-",
                "0";
         bnf:label "numericliteral";
         bnf:matches "[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?";
         :reference "<a href='#numericliteral'>numericliteral</a>" .
    
    n3:object     a :Production;
         bnf:canBeSequence  (
        n3:path  );
         bnf:label "object";
         bnf:mustBeOneSequence  (
         (
            n3:path  ) );
         :optionTail (),
                 (
         (
            n3:path  ) );
         :reference "<a href='#object'>object</a>" .
    
    n3:objecttail     a :Production;
         bnf:canBeSequence (),
                 (
        "," 
        n3:object 
        n3:objecttail  );
         bnf:label "objecttail";
         bnf:mustBeOneSequence  (
        () 
         (
            "," 
            n3:object 
            n3:objecttail  ) );
         :optionTail (),
                 (
        () 
         (
            "," 
            n3:object 
            n3:objecttail  ) ),
                 (
         (
            "," 
            n3:object 
            n3:objecttail  ) );
         :reference "<a href='#objecttail'>objecttail</a>" .
    
    n3:path     a :Production;
         bnf:canBeSequence  (
        n3:node 
        n3:pathtail  );
         bnf:label "path";
         bnf:mustBeOneSequence  (
         (
            n3:node 
            n3:pathtail  ) );
         :optionTail (),
                 (
         (
            n3:node 
            n3:pathtail  ) );
         :reference "<a href='#path'>path</a>" .
    
    n3:pathlist     a :Production;
         bnf:canBeSequence (),
                 (
        n3:path 
        n3:pathlist  );
         bnf:label "pathlist";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:path 
            n3:pathlist  ) );
         :optionTail (),
                 (
        () 
         (
            n3:path 
            n3:pathlist  ) ),
                 (
         (
            n3:path 
            n3:pathlist  ) );
         :reference "<a href='#pathlist'>pathlist</a>" .
    
    n3:pathtail     a :Production;
         bnf:canBeSequence (),
                 (
        "!" 
        n3:path  ),
                 (
        "^" 
        n3:path  );
         bnf:label "pathtail";
         bnf:mustBeOneSequence  (
        () 
         (
            "!" 
            n3:path  )
         (
            "^" 
            n3:path  ) );
         :optionTail (),
                 (
        () 
         (
            "!" 
            n3:path  )
         (
            "^" 
            n3:path  ) ),
                 (
         (
            "!" 
            n3:path  )
         (
            "^" 
            n3:path  ) ),
                 (
         (
            "^" 
            n3:path  ) );
         :reference "<a href='#pathtail'>pathtail</a>" .
    
    n3:prop     a :Production;
         bnf:canBeSequence  (
        n3:node  );
         bnf:label "prop";
         bnf:mustBeOneSequence  (
         (
            n3:node  ) );
         :optionTail (),
                 (
         (
            n3:node  ) );
         :reference "<a href='#prop'>prop</a>" .
    
    n3:propertylist     a :Production;
         bnf:canBeSequence (),
                 (
        n3:verb 
        n3:object 
        n3:objecttail 
        n3:propertylisttail  );
         bnf:label "propertylist";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) );
         :optionTail (),
                 (
        () 
         (
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) ),
                 (
         (
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) );
         :reference "<a href='#propertylist'>propertylist</a>" .
    
    n3:propertylisttail     a :Production;
         bnf:canBeSequence (),
                 (
        ";" 
        n3:verb 
        n3:object 
        n3:objecttail 
        n3:propertylisttail  );
         bnf:label "propertylisttail";
         bnf:mustBeOneSequence  (
        () 
         (
            ";" 
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) );
         :optionTail (),
                 (
        () 
         (
            ";" 
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) ),
                 (
         (
            ";" 
            n3:verb 
            n3:object 
            n3:objecttail 
            n3:propertylisttail  ) );
         :reference "<a href='#propertylisttail'>propertylisttail</a>" .
    
    n3:qname     a :Production;
         bnf:canStartWith ":",
                "_",
                "a";
         bnf:label "qname";
         bnf:matches "(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?";
         :reference "<a href='#qname'>qname</a>" .
    
    n3:statement     a :Production;
         bnf:canBeSequence  (
        n3:subject 
        n3:propertylist  );
         bnf:label "statement";
         bnf:mustBeOneSequence  (
         (
            n3:subject 
            n3:propertylist  ) );
         :optionTail (),
                 (
         (
            n3:subject 
            n3:propertylist  ) );
         :reference "<a href='#statement'>statement</a>" .
    
    n3:statementlist     a :Production;
         bnf:canBeSequence (),
                 (
        n3:statement 
        n3:statementtail  );
         bnf:label "statementlist";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:statement 
            n3:statementtail  ) );
         :optionTail (),
                 (
        () 
         (
            n3:statement 
            n3:statementtail  ) ),
                 (
         (
            n3:statement 
            n3:statementtail  ) );
         :reference "<a href='#statementlist'>statementlist</a>" .
    
    n3:statements_optional     a :Production;
         bnf:canBeSequence (),
                 (
        n3:statement 
        "." 
        n3:statements_optional  );
         bnf:label "statements_optional";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:statement 
            "." 
            n3:statements_optional  ) );
         :optionTail (),
                 (
        () 
         (
            n3:statement 
            "." 
            n3:statements_optional  ) ),
                 (
         (
            n3:statement 
            "." 
            n3:statements_optional  ) );
         :reference "<a href='#statements_optional'>statements_optional</a>" .
    
    n3:statementtail     a :Production;
         bnf:canBeSequence (),
                 (
        "." 
        n3:statementlist  );
         bnf:label "statementtail";
         bnf:mustBeOneSequence  (
        () 
         (
            "." 
            n3:statementlist  ) );
         :optionTail (),
                 (
        () 
         (
            "." 
            n3:statementlist  ) ),
                 (
         (
            "." 
            n3:statementlist  ) );
         :reference "<a href='#statementtail'>statementtail</a>" .
    
    n3:string     a :Production;
         bnf:canStartWith "\"";
         bnf:label "string";
         bnf:matches """(\""".*\""")|("([^"]|(\\\\["\\\\a-z]))*")""";
         :reference "<a href='#string'>string</a>" .
    
    n3:subject     a :Production;
         bnf:canBeSequence  (
        n3:path  );
         bnf:label "subject";
         bnf:mustBeOneSequence  (
         (
            n3:path  ) );
         :optionTail (),
                 (
         (
            n3:path  ) );
         :reference "<a href='#subject'>subject</a>" .
    
    n3:symbol     a :Production;
         bnf:canBeSequence  (
        n3:explicituri  ),
                 (
        n3:qname  );
         bnf:label "symbol";
         bnf:mustBeOneSequence  (
         (
            n3:explicituri  )
         (
            n3:qname  ) );
         :optionTail (),
                 (
         (
            n3:explicituri  )
         (
            n3:qname  ) ),
                 (
         (
            n3:qname  ) );
         :reference "<a href='#symbol'>symbol</a>" .
    
    n3:universal     a :Production;
         bnf:canBeSequence  (
        "@forAll" 
        <#_g6>  );
         bnf:label "universal";
         bnf:mustBeOneSequence  (
         (
            "@forAll" 
            <#_g6>  ) );
         :optionTail (),
                 (
         (
            "@forAll" 
            <#_g6>  ) );
         :reference "<a href='#universal'>universal</a>" .
    
    n3:variable     a :Production;
         bnf:canStartWith "?";
         bnf:label "variable";
         bnf:matches "\\?[a-zA-Z_][a-zA-Z0-9_]*";
         :reference "<a href='#variable'>variable</a>" .
    
    n3:verb     a :Production;
         bnf:canBeSequence  (
        "<="  ),
                 (
        "="  ),
                 (
        "=>"  ),
                 (
        "@a"  ),
                 (
        "@has" 
        n3:prop  ),
                 (
        "@is" 
        n3:prop 
        "@of"  ),
                 (
        n3:prop  );
         bnf:label "verb";
         bnf:mustBeOneSequence  (
         (
            n3:prop  )
         (
            "@has" 
            n3:prop  )
         (
            "@is" 
            n3:prop 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) );
         :optionTail (),
                 (
         (
            "<="  ) ),
                 (
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@has" 
            n3:prop  )
         (
            "@is" 
            n3:prop 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            "@is" 
            n3:prop 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) ),
                 (
         (
            n3:prop  )
         (
            "@has" 
            n3:prop  )
         (
            "@is" 
            n3:prop 
            "@of"  )
         (
            "@a"  )
         (
            "="  )
         (
            "=>"  )
         (
            "<="  ) );
         :reference "<a href='#verb'>verb</a>" .
    
    <#_g0>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:declaration 
        <#_g0>  );
         bnf:label "declaration_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:declaration 
            <#_g0>  ) );
         bnf:zeroOrMore n3:declaration;
         :optionTail (),
                 (
        () 
         (
            n3:declaration 
            <#_g0>  ) ),
                 (
         (
            n3:declaration 
            <#_g0>  ) );
         :reference "<a href='#declaration_s'>declaration_s</a>" .
    
    <#_g1>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:universal 
        <#_g1>  );
         bnf:label "universal_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:universal 
            <#_g1>  ) );
         bnf:zeroOrMore n3:universal;
         :optionTail (),
                 (
        () 
         (
            n3:universal 
            <#_g1>  ) ),
                 (
         (
            n3:universal 
            <#_g1>  ) );
         :reference "<a href='#universal_s'>universal_s</a>" .
    
    <#_g2>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:existential 
        <#_g2>  );
         bnf:label "existential_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:existential 
            <#_g2>  ) );
         bnf:zeroOrMore n3:existential;
         :optionTail (),
                 (
        () 
         (
            n3:existential 
            <#_g2>  ) ),
                 (
         (
            n3:existential 
            <#_g2>  ) );
         :reference "<a href='#existential_s'>existential_s</a>" .
    
    <#_g3>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:declaration 
        <#_g3>  );
         bnf:label "declaration_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:declaration 
            <#_g3>  ) );
         bnf:zeroOrMore n3:declaration;
         :optionTail (),
                 (
        () 
         (
            n3:declaration 
            <#_g3>  ) ),
                 (
         (
            n3:declaration 
            <#_g3>  ) );
         :reference "<a href='#declaration_s'>declaration_s</a>" .
    
    <#_g4>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:universal 
        <#_g4>  );
         bnf:label "universal_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:universal 
            <#_g4>  ) );
         bnf:zeroOrMore n3:universal;
         :optionTail (),
                 (
        () 
         (
            n3:universal 
            <#_g4>  ) ),
                 (
         (
            n3:universal 
            <#_g4>  ) );
         :reference "<a href='#universal_s'>universal_s</a>" .
    
    <#_g5>     a :Production;
         bnf:canBeSequence (),
                 (
        n3:existential 
        <#_g5>  );
         bnf:label "existential_s";
         bnf:mustBeOneSequence  (
        () 
         (
            n3:existential 
            <#_g5>  ) );
         bnf:zeroOrMore n3:existential;
         :optionTail (),
                 (
        () 
         (
            n3:existential 
            <#_g5>  ) ),
                 (
         (
            n3:existential 
            <#_g5>  ) );
         :reference "<a href='#existential_s'>existential_s</a>" .
    
    <#_g6>     a :Production;
         bnf:canBeSequence  (
        "."  ),
                 (
        n3:symbol 
        <#_g9>  );
         bnf:commaSeparatedPeriodTerminatedListOf n3:symbol;
         bnf:label "symbol_csl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            n3:symbol 
            <#_g9>  ) );
         :optionTail (),
                 (
         (
            "."  )
         (
            n3:symbol 
            <#_g9>  ) ),
                 (
         (
            n3:symbol 
            <#_g9>  ) );
         :reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g7>     a :Production;
         bnf:canBeSequence  (
        "."  ),
                 (
        n3:symbol 
        <#_g10>  );
         bnf:commaSeparatedPeriodTerminatedListOf n3:symbol;
         bnf:label "symbol_csl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            n3:symbol 
            <#_g10>  ) );
         :optionTail (),
                 (
         (
            "."  )
         (
            n3:symbol 
            <#_g10>  ) ),
                 (
         (
            n3:symbol 
            <#_g10>  ) );
         :reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g8>     a :Production;
         bnf:canBeSequence  (
        "."  ),
                 (
        n3:barename 
        <#_g11>  );
         bnf:commaSeparatedPeriodTerminatedListOf n3:barename;
         bnf:label "barename_csl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            n3:barename 
            <#_g11>  ) );
         :optionTail (),
                 (
         (
            "."  )
         (
            n3:barename 
            <#_g11>  ) ),
                 (
         (
            n3:barename 
            <#_g11>  ) );
         :reference "<a href='#barename_csl'>barename_csl</a>" .
    
    <#_g9>     a :Production;
         bnf:CSLTail n3:symbol;
         bnf:canBeSequence  (
        "," 
        n3:symbol 
        <#_g9>  ),
                 (
        "."  );
         bnf:label "symbol_necsl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            "," 
            n3:symbol 
            <#_g9>  ) );
         :optionTail (),
                 (
         (
            "," 
            n3:symbol 
            <#_g9>  ) ),
                 (
         (
            "."  )
         (
            "," 
            n3:symbol 
            <#_g9>  ) );
         :reference "<a href='#symbol_necsl'>symbol_necsl</a>" .
    
    <#_g10>     a :Production;
         bnf:CSLTail n3:symbol;
         bnf:canBeSequence  (
        "," 
        n3:symbol 
        <#_g10>  ),
                 (
        "."  );
         bnf:label "symbol_necsl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            "," 
            n3:symbol 
            <#_g10>  ) );
         :optionTail (),
                 (
         (
            "," 
            n3:symbol 
            <#_g10>  ) ),
                 (
         (
            "."  )
         (
            "," 
            n3:symbol 
            <#_g10>  ) );
         :reference "<a href='#symbol_necsl'>symbol_necsl</a>" .
    
    <#_g11>     a :Production;
         bnf:CSLTail n3:barename;
         bnf:canBeSequence  (
        "," 
        n3:barename 
        <#_g11>  ),
                 (
        "."  );
         bnf:label "barename_necsl";
         bnf:mustBeOneSequence  (
         (
            "."  )
         (
            "," 
            n3:barename 
            <#_g11>  ) );
         :optionTail (),
                 (
         (
            "," 
            n3:barename 
            <#_g11>  ) ),
                 (
         (
            "."  )
         (
            "," 
            n3:barename 
            <#_g11>  ) );
         :reference "<a href='#barename_necsl'>barename_necsl</a>" .
    
#ENDS
