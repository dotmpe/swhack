# notes as this was developed...
# http://ilrt.org/discovery/chatlogs/rdfig/2003-03-10#T22-49-48
#
# $Id$
# see log at end

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix str: <http://www.w3.org/2000/10/swap/string#>.

@prefix k: <http://opencyc.sourceforge.net/daml/cyc.daml#>.

@prefix map: <http://www.w3.org/2000/10/swap/pim/earthMap#>.
@prefix usps: <http://www.w3.org/2000/10/swap/pim/usps#> .

@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix cal: <http://www.w3.org/2002/12/cal/ical#>.

@prefix apt: <http://www.daml.org/2001/10/html/airport-ont#>.

@prefix      : <http://www.w3.org/2000/10/swap/pim/cityLookup#>.
@prefix cityl: <http://www.w3.org/2000/10/swap/pim/cityLookup#>.

# http://www.wunderground.com/cgi-bin/findweather/getForecast?query=Budapest%2C+Hungary

{
 ?CITY k:inRegion ?AREA.

 ?N is str:concatenation of (
  [ is map:cityName of ?CITY ]
  "%2C"
  [ is map:countryName of ?AREA ]
 ).
}
  log:implies { ?CITY :formVal ?N }.

# What we really want is a built-in for
# uri-escaping. This KLUDGE works just
# for the U.K.
{
 ?CITY k:inRegion [ map:countryName "United Kingdom"].

 ?N is str:concatenation of (
  [ is map:cityName of ?CITY ]
  "%2CUnited+Kingdom"
 ).
}
  log:implies { ?CITY :formVal ?N }.


{
 ?CITY k:inRegion ?AREA.

 ?N is str:concatenation of (
  [ is map:cityName of ?CITY ]
  "%2C"
  [ is usps:stateAbbr of ?AREA ]
 ).
}
  log:implies { ?CITY :formVal ?N }.

{
 ?WHERE apt:iataCode ?CODE.
}
  log:implies { ?WHERE :formVal ?CODE }.


#http://www.vicinity.com/myblast/map.mb?CMD=LFILL&&CT=47.43000031:19.18000031:90000&

{
 ?PG log:uri [ is str:concatenation of (
  "http://www.wunderground.com/cgi-bin/findweather/getForecast?query="
  [ is :formVal of ?CITY ] ) ].


 ?PG log:content ?TXT.
 (?TXT "CMD=LFILL&&CT=([^:]+):") str:scrape ?LAT.
 (?TXT "CMD=LFILL&&CT=[^:]+:([^:]+):") str:scrape ?LON.
} => { ?CITY :weatherPage ?PG; geo:lat ?LAT; geo:long ?LON }.


# http://mappoint.msn.com/map.aspx?L=USA&C=40.75013351,-73.99700928&A=70
{
 ?PG log:uri [ is str:concatenation of (
  "http://www.wunderground.com/cgi-bin/findweather/getForecast?query="
  [ is :formVal of ?CITY ] ) ].


 ?PG log:content ?TXT.
 (?TXT "L=USA&C=([^,]+),") str:scrape ?LAT.
 (?TXT "L=USA&C=[^,]+,([^&]+)&") str:scrape ?LON.
} => { ?CITY :weatherPage ?PG; geo:lat ?LAT; geo:long ?LON }.

#<font size="-1">Local Time: <b> 3:29 PM EST on February 22, 2004</b> [America/New_York] </font>
{
 ?PG log:uri [ is str:concatenation of (
  "http://www.wunderground.com/cgi-bin/findweather/getForecast?query="
  [ is :formVal of ?CITY ] ) ].


 ?PG log:content ?TXT.
 (?TXT "Local Time: <b>[^<]+</b> \\[([^]]+)\\]") str:scrape ?TZN.
 ?TZ log:uri [
   is str:concatenation of
   ("http://www.w3.org/2002/12/cal/tzd/" ?TZN "#tz")
  ].

} => {
 ?TZ a cal:Vtimezone, k:SpatialThing.
 ?CITY :weatherPage ?PG; k:inRegion ?TZ.
 }.


# test case

#[ map:cityName "Budapest";
#  k:inRegion [ map:countryName "Hungary" ] ].

# $Log$
# Revision 1.6  2004-04-14 16:01:06  connolly
# kludge for United Kingdom
#
# Revision 1.5  2004/02/22 20:50:06  connolly
#  - scrape US-specific lat/lon pattern
#  - scrape time zone names as well as lat/lon
#  - look up airport codes as well as city names
#
# Revision 1.4  2003/07/07 16:10:16  connolly
# documented nearestAirport property; cleaned up parse errors in contact.n3; used doc:persistencePolicy in contact; fixed typo in doc
#
# Revision 1.3  2003/04/14 21:19:34  connolly
# 4Apr refactor
#
# Revision 1.2  2003/03/10 23:57:42  connolly
# u.s. city support
#
# Revision 1.1  2003/03/10 22:51:38  connolly
# got one case to work
#
