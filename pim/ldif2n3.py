#!/usr/bin/python
#
import sys
import string
import os
import re

version = "$Id$"[1:-1]

# import  notation3  # from http://www.w3.org/2000/10/swap/notation3.py

global verbose
global recursive

#def ss(str):
#    """Format string for output"""
#    return notation3.stringToN3(str)

def macroSubstitute(line, dict):
    return line  #@@@@@@

def convert(path):
    """Convert LDIF format to n3"""
    global nochange
    global verbose
    dict = {}

    print "# http://www.w3.org/DesignIssues/Notation3"
    print "# Generated from", path
    print "# Generated by  ", version
    print
    print "@prefix foaf: <http://xmlns.com/foaf/0.1/>."
    print "@prefix ldif: <http://ww.w3.org/2007/ont/ldif#>."
    print

    input = open(path, "r")
    buf = input.read()  # Read the file
    input.close()

    line = 0
    
#    comment = re.compile(r'^(.*?)#.*$')
#    macro = re.compile(r'([-_a-zA-Z0-9\.]+)=(.*)')
#    macro1 = re.compile(r'^(.*?)\$([a-zA-Z0-9\$@])(.*)$')
#    macron = re.compile(r'^(.*?)\$\(([a-zA-Z0-9\$@]+)\)(.*)$')
#    include = re.compile(r'include *([-_a-zA-Z0-9\./,]+)')
#    target = re.compile(r'^(.*?)\$@(.*)$')
#    dependency = re.compile( r'^([-_a-zA-Z0-9,][-_a-zA-Z0-9\.,]*) *:(.*)$' )
#    rule = re.compile(r'^\.([-_a-zA-Z0-9,]*)\.([-_a-zA-Z0-9,]*)')
#    recipe = re.compile( r'^\t.*')
#    filename = re.compile( r'[-_a-zA-Z0-9\./,]+')
    blank = re.compile(r" *\r?\n")  #"
#    recipeList = []
#    subj = None
    lines = []
    inPerson = 0
    dataline = re.compile(r'([a-zA-Z0-9_]*):[ \t]*(.*)')

    
    asFoaf = { "cn": "foaf:name" }
    
    while 1:
        lines.append(line)
	line = buf.find("\n", line)
	if line <0: break
	line += 1
	
	here = 0
	m = blank.match(buf, line)
	if m:
	    print "    ]."
	    inPerson = 0
	    continue
	
	m = dataline.match(buf, line)
	if m:
	    field = m.group(1)
	    value = m.group(2)
	    
	    if not inPerson:
		print "    ["
		inPerson = 1
		
	    if field == "objectclass":
		print '\ta ldif:%s; '% (value[0:1].upper() + value[1:])
	    
	    elif field =="mail":
		print '\tfoaf:mailbox <mailto:%s>;' % (value)
	    else:
		foaf = asFoaf.get(field, None)
		if foaf:
		    print '\t%s "%s"; '% (foaf, value)
		else:
		    print '\tldif:%s "%s"; '% (field, value)
	    continue

	print "# ERROR: Unknown line format:" + buf[line:line+20]
#    print "]."
	

def do(path):
    if verbose: sys.stderr.write("# make2n3: converting " + path + "\n")
    return convert(path)
        
######################################## Main program

recursive = 0
nochange = 1
verbose = 0
doall = 0
files = []

for arg in sys.argv[1:]:
    if arg[0:1] == "-":
        if arg == "-?" or arg == "--help":
	    print """Convert Makfile format of make(1) to n3 format.

Syntax:    make2n3  <file>

    where <file> can be omitted and if so defaults to Makefile.
    This program was http://www.w3.org/2000/10/swap/util/make2p3.py
    $Id$
    
    -v  verbose
"""
        elif arg == "-v": verbose = 1
	else:
            print """Bad option argument."""
            sys.exit(-1)
    else:
        files.append(arg)

if files == []: files = [ "Makefile" ] # Default to Makefile

for path in files:
    do(path)
