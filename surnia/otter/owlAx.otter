% $Id$

% set(auto).

% check for internal consistency with something like
%   mace -P -N 10 -k 768000 < util/owlAx.otter
% but it's gotten too big.  :-(

formula_list(usable).

%   Note on "BIDIR"   These are all "->" which logically
%   could/should be "<->", although the reverse arrows
%   seems generally unneeded.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%   rdf_nil
%

-(exists c (rdf(rdf_nil, rdf_rest, c))).
-(exists c (rdf(rdf_nil, rdf_first, c))).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_Nothing
%

% (all X (-rdf(X, rdf_type, owl_Nothing))).

-(exists c (rdf(c, rdf_type, owl_Nothing))).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_Thing, rdf_Resource
%

(all X (rdf(X, rdf_type, owl_Thing))).
(all X (rdf(X, rdf_type, rdf_Resource))).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_intersectionOf
%
%   not really full semantics

all INST CLASS LIST (
   rdf(INST, rdf_type, CLASS) &
   rdf(CLASS, owl_intersectionOf, LIST)
   ->
   instanceOfAll(INST, LIST)
).

all INST LIST HEAD TAIL (
   (rdf(LIST, rdf_first, HEAD) &
    rdf(LIST, rdf_rest, TAIL) &
    rdf(INST, rdf_type, HEAD) &
    instanceOfAll(INST, TAIL))
  ->
   instanceOfAll(INST, LIST)
).
all INST (instanceOfAll(INST, rdf_nil)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_unionOf
%
%   not really full semantics

all INST CLASS LIST (
   rdf(INST, rdf_type, CLASS) &
   rdf(CLASS, owl_unionOf, LIST)
   ->
   instanceOfAny(INST, LIST)
).

all INST LIST HEAD TAIL (
   (rdf(LIST, rdf_first, HEAD) &
    rdf(LIST, rdf_rest, TAIL) &
    rdf(INST, rdf_type, HEAD) &
    instanceOfAny(INST, TAIL))
  ->
   instanceOfAny(INST, LIST)
).
all INST (-instanceOfAny(INST, rdf_nil)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_oneOf
%
%     thing a Foo.  Foo owl_oneOf ( a b c ... )
%   to be in the class means to be equal to one of the list members

all CLASS LIST (
   rdf(CLASS, owl_oneOf, LIST)
   ->    % BIDIR
   (all INST (
      rdf(INST, rdf_type, CLASS) <-> inList(INST, LIST)
   ))
).

all MEMBER LIST HEAD TAIL (
   (rdf(LIST, rdf_first, HEAD) &
    rdf(LIST, rdf_rest, TAIL) &
    ( rdf(MEMBER, owl_sameAs, HEAD) | 
      inList(MEMBER, TAIL) ))
  ->
   inList(MEMBER, LIST)
).
all MEMBER (-inList(MEMBER, rdf_nil)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_equivalentClass
%

all C1 C2 (
   rdf(C1, owl_equivalentClass, C2)
   <->     % <- needed for http://www.w3.org/2002/03owlt/I4.6/conclusions003
   (all INST (
     rdf(INST, rdf_type, C1) <-> rdf(INST, rdf_type, C2) 
   ))
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   rdfs_subClassOf
%

all C1 C2 (
   rdf(C1, rdfs_subClassOf, C2)
   ->     % BIDIR 
   (all INST (
     rdf(INST, rdf_type, C1) -> rdf(INST, rdf_type, C2) 
   ))
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_complementOf
%

all C1 C2 (
   rdf(C1, owl_complementOf, C2)
   ->     % BIDIR 
   (all INST (
     rdf(INST, rdf_type, C1) <-> -rdf(INST, rdf_type, C2) 
   ))
).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_disjointWith
%

all C1 C2 (
   rdf(C1, owl_disjointWith, C2)
   ->     % BIDIR 
   (all INST (
     - (rdf(INST, rdf_type, C1) & rdf(INST, rdf_type, C2))
   ))
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   rdfs_subClassOf
%

all INST C1 C2 (
   rdf(C1, rdfs_subClassOf, C2)
   ->    %%  This is the RDF Core definition; does OWL require
         %%  <-> ???   
   ( rdf(INST, rdf_type, C1) 
     -> 
     rdf(INST, rdf_type, C2) 
   )
).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   allValuesFrom
%
%   The owl:allValuesFrom restriction requires that for every instance
%   of the class that has instances of the specified property, the
%   values of the property are all instances of the specified
%   restriction class.      -- OWL Guide
%

all RESTRICTION PROPERTY BASECLASS INST VALUE (
   ( rdf(RESTRICTION, rdf_type, owl_Restriction) &
     rdf(RESTRICTION, owl_onProperty, PROPERTY) &
     rdf(RESTRICTION, owl_allValuesFrom, BASECLASS) &
     rdf(INST, rdf_type, RESTRICTION) )
   ->
   ( rdf(INST, PROPERTY, VALUE)
     <->
     rdf(VALUE, rdf_type, BASECLASS)  )
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   someValuesFrom
%
%   allValuesFrom
%      For all wines, if they have makers, all the makers are wineries.
%   someValuesFrom 
%      For all wines, they have at least one maker that is a winery.
%              -- OWL Guide
%
%   

all RESTRICTION PROPERTY BASECLASS INST (
   ( rdf(RESTRICTION, rdf_type, owl_Restriction) &
     rdf(RESTRICTION, owl_onProperty, PROPERTY) &
     rdf(RESTRICTION, owl_someValuesFrom, BASECLASS) &
     rdf(INST, rdf_type, RESTRICTION) )
   -> 
%   conceptually we want:
%  (exists VALUE (
%    rdf(INST, PROPERTY, VALUE)
%    rdf(VALUE, rdf_type, BASECLASS)
%  ))
%   but we'll manually Skolemize with fewer dependencies:
%
   ( rdf(INST, PROPERTY, valueSkFunc(INST, RESTRICTION)) &
     rdf(valueSkFunc(INST, RESTRICTION), rdf_type, BASECLASS) )
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_hasValue
%

all RESTRICTION PROPERTY VALUE INST (
   ( rdf(RESTRICTION, rdf_type, owl_Restriction) &
     rdf(RESTRICTION, owl_onProperty, PROPERTY) &
     rdf(RESTRICTION, owl_hasValue, VALUE) &
     rdf(INST, rdf_type, RESTRICTION) )
   ->
   rdf(INST, PROPERTY, VALUE)
).
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_FunctionalProperty
%

all PROPERTY (
   rdf(PROPERTY, rdf_type, owl_FunctionalProperty)
   <->     % BIDIR         TRY for FP004 !
   ( all INST VAL1 VAL2 (
     ( rdf(INST, PROPERTY, VAL1) &
       rdf(INST, PROPERTY, VAL2) )
     ->
     rdf(VAL1, owl_sameAs, VAL2)
   ))
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_InverseFunctionalProperty
%

all PROPERTY (
   rdf(PROPERTY, rdf_type, owl_InverseFunctionalProperty)
   ->     % BIDIR
   ( all INST1 INST2 VAL (
     ( rdf(INST1, PROPERTY, VAL) &
       rdf(INST2, PROPERTY, VAL) )
      ->
       rdf(INST1, owl_sameAs, INST2)
   ))
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_sameAs
%

all THING (
   rdf(THING, owl_sameAs, THING)
).

all THING1 THING2 (
   rdf(THING1, owl_sameAs, THING2) 
   ->     % BIDIR
   (all X Y (
      ( rdf(X, Y, THING1) <-> rdf(X, Y, THING2) ) &
      ( rdf(X, THING1, Y) <-> rdf(X, THING2, Y) ) &
      ( rdf(THING1, X, Y) <-> rdf(THING2, X, Y) ) 
   ))
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_EquivalentProperty
%

all PRED1 PRED2 (
   rdf(PRED1, owl_equivalentProperty, PRED2)
   ->     % BIDIR
   (all SUBJ OBJ (
      ( rdf(SUBJ, PRED1, OBJ) <-> rdf(SUBJ, PRED2, OBJ) )
   ))
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   rdfs_subPropertyOf
%

all PRED1 PRED2 (
   rdf(PRED1, rdfs_subPropertyOf, PRED2)
   ->     % BIDIR
   (all SUBJ OBJ (
      ( rdf(SUBJ, PRED1, OBJ) -> rdf(SUBJ, PRED2, OBJ) )
   ))
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   rdfs_range
%

all PRED CLASS (
   rdf(PRED, rdfs_range, CLASS) 
   <->      % maybe needed for FunctionalProperty004
   (all SUBJ OBJ (
     rdf(SUBJ, PRED, OBJ) -> rdf(OBJ, rdf_type, CLASS)
   ))
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_InverseOf
%

all PRED1 PRED2 (
   rdf(PRED1, owl_inverseOf, PRED2)
   ->     % BIDIR
   (all SUBJ OBJ (
      ( rdf(SUBJ, PRED1, OBJ) <-> -rdf(SUBJ, PRED2, OBJ) )
   ))
).

% should be a theorem....
rdf(owl_InverseOf, rdf_type, owl_SymmetricProperty).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%   owl_SymmetricProperty

(all P (
   rdf(P, rdf_type, owl_SymmetricProperty)
   ->     % BIDIR
   (all X Y (
      rdf(X, P, Y) <-> rdf(Y, P, X)
   ))
)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   owl_TransitiveProperty
%

(all P (
   rdf(P, rdf_type, owl_TransitiveProperty)
   ->    % BIDIR
   (all X Y Z (
      ( rdf(X, P, Y) & rdf(Y, P, Z) )
      <->
      rdf(X, P, Z)
   ))
)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    owl_AllDifferent
%


all A (
   rdf(A, rdf_type, owl_AllDifferent)
   <->
   (exists L (
     rdf(A, owl_distinctMembers, L)
   ))
).

all A L (
   rdf(A, owl_distinctMembers, L)
   ->   % BIDIR
   allDifferent(L)
).

allDifferent(rdf_nil).

all LIST HEAD TAIL (
   (allDifferent(LIST) &
    rdf(LIST, rdf_first, HEAD) &
    rdf(LIST, rdf_rest, TAIL))
   ->
   differentFromAll(HEAD, TAIL)
).

all SUBJECT (
  differentFromAll(SUBJECT, rdf_nil)
).

all SUBJECT LIST HEAD TAIL (
   (differentFromAll(SUBJECT, LIST) &
    rdf(LIST, rdf_first, HEAD) &
    rdf(LIST, rdf_rest, TAIL))
   ->
   ( rdf(SUBJECT, owl_differentFrom, HEAD) &
     differentFromAll(SUBJECT, TAIL) )
).

all X Y (
   rdf(X, owl_differentFrom, Y)
   ->
   rdf(Y, owl_differentFrom, X)
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   Special Axiom on Inverse Cardinality
%
%   (I'd think this would be a theorem, but it doesn't seem to be,
%   even with all the arrows bidirectional...)
%

all P1 P2 (
   ( rdf(P1, owl_inverseOf, P2) &
     rdf(P1, rdf_type, owl_FunctionalProperty) )
   ->
   rdf(P2, rdf_type, owl_InverseFunctionalProperty)
).

all P1 P2 (
   ( rdf(P1, owl_inverseOf, P2) &
     rdf(P1, rdf_type, owl_InverseFunctionalProperty) )
   ->
   rdf(P2, rdf_type, owl_FunctionalProperty)
).
    
% $Log$
% Revision 1.7  2003-07-30 03:25:18  sandro
% added owl_Thing and a BIDIR to pass 5.24/...004
%
% Revision 1.6  2003/07/30 03:08:01  sandro
% third try for allDifferent; passes test finally
%
% Revision 1.5  2003/07/30 03:05:40  sandro
% switched to using equals for allDifferent
%
% Revision 1.4  2003/07/30 02:43:26  sandro
% added first draft of allDifferent
%
% Revision 1.3  2003/07/30 02:26:40  sandro
% added Id and Log cvs keywords
%
