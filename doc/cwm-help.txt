Command line RDF/N3 tool
        
 <command> <options> <inputURIs>
 
--pipe        Don't store, just pipe out *

--rdf         Input & Output ** in RDF M&S 1.0 insead of n3 from now on
--n3          Input & Output in N3 from now on
--rdf=flags   Input & Output ** in RDF and set given RDF flags
--n3=flags    Input & Output in N3 and set N3 flags
--ntriples    Input & Output in NTriples (equiv --n3=spartan -bySubject -quiet)
--language=x  Input & Output in "x" (rdf, n3, etc)  --rdf same as: --language=rdf
--languageOptions=y     --n3=sp same as:  --language=n3 --languageOptions=sp
--ugly        Store input and regurgitate *
--bySubject   Store input and regurgitate in subject order *
--no          No output *
              (default is to store and pretty print with anonymous nodes) *
--strings     Dump :s to stdout ordered by :k whereever { :k log:outputString :s }

--apply=foo   Read rules from foo, apply to store, adding conclusions to store
--filter=foo  Read rules from foo, apply to store, REPLACING store with conclusions
--rules       Apply rules in store to store, adding conclusions to store
--think       as -rules but continue until no more rule matches (or forever!)
--engine=otter use otter (in your $PATH) instead of llyn for linking, etc
--why         Replace the store with an explanation of its contents
--mode=flags  Set modus operandi for inference (see below)
--flatten     turn formulas into triples using LX vocabulary
--unflatten   turn described-as-true LX sentences into formulas
--think=foo   as -apply=foo but continue until no more rule matches (or forever!)
--purge       Remove from store any triple involving anything in class log:Chaff
--purge-rules Remove from store any triple involving log:implies
--crypto      Enable processing of crypto builtin functions. Requires python crypto.
--help        print this message
--revision    print CVS revision numbers of major modules
--chatty=50   Verbose output of questionable use, range 0-99
--with        Pass any further arguments to the N3 store as os:argv values
 

            * mutually exclusive
            ** doesn't work for complex cases :-/
Examples:
  cwm --rdf foo.rdf --n3 --pipe     Convert from rdf/xml to rdf/n3
  cwm foo.n3 bar.n3 --think         Combine data and find all deductions
  cwm foo.n3 --flat --n3=spart

See http://www.w3.org/2000/10/swap/doc/cwm  for more documentation.

Mode flags affect inference extedning to the web:
 e   Errors loading schemas of definitive documents are fatal
 m   Schemas and definitive documents laoded are merged into the meta knowledge
     (otherwise they are consulted independently)
 r   Needed to enable any remote stuff.
 s   Read the schema for any predicate in a query.
 
 u   Generate unique ids using a run-specific


Flags for N3 output are as follows:-
        
a   Anonymous nodes should be output using the _: convention (p flag or not).
d   Don't use default namespace (empty prefix)
i   Use identifiers from store - don't regen on output
l   List syntax suppression. Don't use (..)
n   No numeric syntax - use strings typed with ^^ syntax
p   Prefix suppression - don't use them, always URIs in <> instead of qnames.
q   Quiet - don't make comments about the environment in which processing was done.
r   Relative URI suppression. Always use absolute URIs.
s   Subject must be explicit for every statement. Don't use ";" shorthand.
t   "this" and "()" special syntax should be suppresed.


        Flags to control RDF/XML output (after --rdf=) areas follows:
        
        c  - Don't use elements as class names
        d  - Don't use default namespace



    Flags to control RDF/XML INPUT (after --rdf=) follow:
        S  - Strict spec. Unknown parse type treated as Literal instead of error.
        T  - take foreign XML as transparent and parse any RDF in it
             (default it is to ignore unless rdf:RDF at top level)
	L  - If non-rdf attributes have no namespace prefix, assume in local <#> namespace
	D  - Assume default namespace decalred as local document is assume xmlns=""


