<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Trust</title>
  <link href="style.css" rel="stylesheet" type="text/css" />
</head>

<body xml:lang="en" lang="en">

<div class="noprint">
<p><a href="/">W3C</a> | <a href="/2001/sw/Overview.html">Semantic Web</a> |
<a href="/2000/01/sw/Overview.html">Advanced Development</a> | <a
href="/2000/10/swap/">SWAP</a> | <a href="/2000/10/swap/doc/">Tutorial</a> |
Reaching Out Onto the Web</p>
</div>

<h1>Trust</h1>

<p>In the real world, you don't want a program doing things without being
careful. On eof the more difficult things is fguring out what rules you
really use for deciding what data to trust. The Semantic Web doesn't make
that social problem much easier. When you have figured out a trust model, the
Semantic Web allows you to write it down. Not only that -- if we introdcue
cryptographic built-in functions, we can actually make a system whcih will
use public key cryptography to check the authenticity of data.</p>

<p>This can of course get very big, and as complicated as your social or
business environment. However, we can give a taste with a simple example. The
idea here is not to learn this particular cryptographic library, but to get
the feel of what can be done.</p>

<h2>Delegated authority</h2>

<p>Suppose we want to set up an access control system for the W3C <em>Member
site</em>. (Yes, even though companies support W3C just because is a good
thing, many quite reasonably need this "what's in it for me?"
justification).</p>

<p>We will formalize the social arrangements and then we will write the rules
which encapsulate those arranegments so that they can be followed by a
machine. Let's just take the case of a web page which is only accessible to
W3C members. What does that mean? Well, when a company or organization joins
the W3C Advisory Committee representative is chosen as the liaison between
everyone at the organization and everything happening at W3C. Currently
(2003) when someone says they belong to a company and want to acecss the
member site in that role, we check, by email, with the AC rep. Let's design a
system to do it with digital signature.</p>

<p><img alt="example of trust processing"
src="../../../../2002/Talks/04-sweb/elisaaccess.png" /></p>

<p>In this picture, Alan Kotok is the W3C associate chairman who deals with
membership. In this case, Kari is the AC rep for W3C member <em>Elisa
Communications</em>. Alan delgates to Kari the right to say who, as a emploee
of Elisa, get access to the W3C Member Site.</p>

<h3>Master Key</h3>

<p>Alan's authority to define who is a W3C is represented by a digital key.
he generates it using the command</p>
<pre>cwm access-gen-master.n3 --think --purge &gt; access-master.private</pre>

<p></p>

<p>where the access-gen-master.n3 contains:</p>
<pre>#  Generate master key

@prefix : &lt;#&gt; .
@prefix log: &lt;http://www.w3.org/2000/10/swap/log#&gt; .
@prefix crypto: &lt;http://www.w3.org/2000/10/swap/crypto#&gt; .
@prefix string: &lt;http://www.w3.org/2000/10/swap/string#&gt; .
@prefix acc: &lt;http://www.w3.org/2000/10/swap/test/crypto/acc.n3#&gt;.

this log:forAll :x , :y.


{ :x crypto:keyLength "1024";
     crypto:publicKey :y } log:implies {
 :x a acc:MasterKeyPair; a acc:Secret.  :y a acc:MasterKey } .

log:forAll a log:Chaff.
log:implies a log:Chaff.</pre>

<p></p>

<p>The <code>crypto:keyLength</code> built-in generates :x, which a string
which actually contains both the private and the public keys. This is
conventient, as anyone who knows a private key needs to keep track of which
public key goes with it. This is not a very semantic web function, as it
isn't repeatable rule you can resue - it is just a trick for generating a
key. (It will generate a different key each time, although the library at one
stage didn't do that to make debugging easier).</p>

<p>The <code>crypto:publicKey</code> builtin is a function which strips out
the private parts of a key :x, leaving only the public part :y. Note we have
class here <code>:Secret</code> which we just use for labellling things which
we don't want another person to know.</p>

<p>The log:Chaff part is to label those bits which are for deletion by the
--purge command, just to leave the key file clean of stuff we don't want.</p>

<p>Kari also generates a key, which represents the authority has as Elisa's
representative. he does this in an identical fashion, using
<code>access-gen-elisa.n3</code>. The actual passing of authority happens
when Kari gives the public part of his key to Alan, in some way secure enough
for Alan to be sure enough it , and Alan then signs something to the effect
that it is indeed Kari's key as AC rep for Eliza.</p>
<pre>cwm access-elisa.public access-master.private access-sign-member-cert.n3 \
 --think --purge --with "Elisa" &gt; access-eliza.cert</pre>

<p>Here, Alan uses the private key which he (alone) has access to and the
public key which Kari gave him.  <code>access-sign-member-cert.n3</code> is a
rule file which does the signing.  It contains, in essence:</p>
<pre>{ :n is os:argv of "1".
  :tk a acc:MemberKey.
  { :tk a acc:MemberKey;
        acc:authorityName :n;
        acc:junk "327462sjsdfjsakdhfkjsafd32164321"
   } log:n3String :str.
   :kp a acc:MasterKeyPair.
   :k a acc:MasterKey.
   ([is crypto:md5 of :str] :kp) crypto:sign :z
} =&gt; {
   :str acc:endorsement[acc:signature :z; acc:key :k
} .</pre>

<p></p>

<p>:n resolves to be the name "Eliza", :tk resolves to be Eliza's public key.
 The string str is string form of the certificate formula, as the digital
signatures work on strings.    The MD5 checksum of the string is formed, and
that is signed with the master key pair (:kp).   All this happens as the left
hand side of the rule is resolved, and when it has, then the conclusion is
that that string has an endorsement which has a given signature and a given
public key.  This  ensordsement information is the certificate.</p>

<p>In exactly the same fashion, Tiina, the employee, makes a key, and gets a
certificate from Kari about that key.</p>

<p>Then the time comes that Tiina wants to access the member site. She makes
up a request for the web page, and signs it with her private key.</p>
<pre>cwm access-tiina.private access-sign-request.n3 \
 --think --purge --with http://www.w3.org/Member &gt; access-1.request</pre>

<p>The with command passes in the URI of the page she would like to
access.</p>

<p>The crux of this whole system is the file <code>access-rule.n3</code>
which tells the web site how to trust a request.</p>

<p></p>

<p></p>

<p>Here is the complete data flow in summary.</p>

<p></p>

<p></p>

<p><img src="../test/crypto/make.jpg" alt="See Makefile for text version"
/></p>

<p></p>

<p>The bit at the bottom shows how the picture itself, <code>make.svg</code>,
was generated from the Makefile - via RDF of course. Some people have
actually started to use RDF just because of the diagram drawing facility, but
we hope by this stage that you will have a longer term and wider vision of
the value of Semantic Web!</p>

<p></p>

<p></p>

<h2>Conclusion</h2>

<p></p>

<p>You will notice that in this example we didn't use a PKI cerificates
looked up in a x.509 hierarchy.</p>

<p>We could have. We would have used an RDF interface to PKI.</p>

<p>There are two interesting reasons not to. One is that in designing the
system fram scratch we defined exactly how it works. We defined what
information Alan signed about Kari, without involvng any other information
actually identifying Kari as an individual person in the world. We don't need
to know Kari's social security number with the Finnish government. The key
represents Kari in the role he plays in this system. Because we are using
RDF, we can put whatever information into the certificate we like. We don't
have to worry about extending the certificate format. Because what we are
doing concerns and represents the realtionships between the involved social
entities without any external authority, it is more weblike in nature: we are
freer to model the actual social trust system we use.</p>

<p>The other interesting point is that the finished system is in fact the
amount of software for working out whether a request is valid is in fact
quite small. One can make it even smaller. Tiina can generate a proof - an
output of the bits of data</p>

<p></p>

<p>@@ Small trusted codebase</p>

<p></p>

<p></p>

<p></p>
<hr />

<div class="noprint">
<p>Tim BL, with his director hat off</p>

<p>$Id$</p>
</div>
</body>
</html>
